---
title: Platform Automation for PCF Command Reference
owner: PCF Platform Automation
---

## <a id='commands'></a> Platform Automation for PCF Commands
This document lists each Platform Automation for PCF command,
and provides information about their intentions, inputs, and outputs.

Each command is also used in a Concourse task,
which is linked in order to provide additional examples.

All commands use an auth file, given in these examples as `auth.yml`.
This auth file controls the target of the command.

The auth file looks like this if you're using internal auth:

<%= yield_for_code_snippet from: 'pivotal-cf/platform-automation', at: 'auth-configuration' %>

The auth file looks like this if you're using external/SAML auth:

<%= yield_for_code_snippet from: 'pivotal-cf/platform-automation', at: 'saml-auth-configuration' %>

The `--help` flag is global,
and can be used to see useage information for each command.

### <a id='apply-changes'></a>apply-changes

Triggers an install on the Ops Manager described by the auth file.

```bash
p-automator apply-changes --auth-file path/to/auth.yml
```

[Example Task](task-reference.html#apply-changes)

`apply-changes` can also be used to trigger an install for just the BOSH Director
with the `--skip-deploy-products`/`-sdp` flag.
While the above task and example don't use this capability,
the following do:

```bash
p-automator apply-changes --auth-file path/to/auth.yml --skip-deploy-products
```

[Example Task](task-reference.html#apply-director-changes)

### <a id='configure-authentication'></a>configure-authentication

Configures Ops Manager with an internal userstore and admin user account.
See [configure-saml-authentication](#configure-saml-authentication) to configure an external SAML user store.
Note that this takes `auth.yml` with a `-c`/`--config` rather than the typical `--auth-file`.

```bash
p-automator configure-authentication --config path/to/auth.yml
```

<%= yield_for_code_snippet from: 'pivotal-cf/platform-automation', at: 'auth-configuration' %>

Setting `username` and `password` will be the authentication used for the Ops Manager UI.

[Example Task](task-reference.html#configure-authentication)

### <a id='configure-director'></a>configure-director
Configures the BOSH Director with settings from a config file.
See [staged-director-config](#staged-director-config),
which can extract a config file.

```bash
p-automator configure-director \
  --auth-file path/to/auth.yml \
  --config path/to/director-config.yml
```

[Example Task](task-reference.html#configure-director)

<p class="note warning">
    <strong>NOTE:</strong>
    For GCP, if service account is used, the property associated_service_account has to be set explicitly in the iaas-configuration section.
</p>

### <a id='configure-product'></a>configure-product
Configures an individual, staged product with settings from a config file.

Not to be confused with Ops Manager's
built-in [import](https://docs.pivotal.io/pivotalcf/customizing/backup-restore/restore-pcf-bbr.html#deploy-import),
which reads all deployed products and configurations from a single opaque file,
intended for import as part of backup/restore and upgrade lifecycle processes.

See [staged-config](#staged-config),
which can extract a config file,
and [stage-product](#stage-product),
which can stage a product that's been uploaded.

```bash
p-automator configure-product \
  --auth-file path/to/auth.yml \
  --config path/to/example-product-config.yml
```

`configure-product` also supports loading variables from a file.
While the above task and example don't use that capability,
the following do:

```bash
p-automator configure-product \
  --auth-file path/to/auth.yml \
  --config path/to/example-product-config.yml \
  --vars-file path/to/example-product-vars.yml \
  --vars-file path/to/more-example-vars.yml
```

[Example Task](task-reference.html#configure-product)

### <a id='configure-saml-authentication'></a>configure-saml-authentication

Configures Ops Manager with an external SAML user store and admin user account.
See [configure-authentication](#configure-authentication) to configure an internal user store.

Because configuring an external auth source does not use the actual credentials,
it can't just draw them from `auth.yml` like `configure-authentication` does.

<%= yield_for_code_snippet from: 'pivotal-cf/platform-automation', at: 'saml-auth-configuration' %>

Configuring SAML has two different auth flows for the UI and the command.
The UI will have a browser based login flow.
The CLI will require `client-id` and `client-secret` as it cannot do a browser login flow.

For more details on using SAML,
please refer to the Ops Manager documentation [here][saml-docs]

[saml-docs]:

```bash
p-automator configure-saml-authentication \
  --config path/to/external-auth-config.yml
```

[Example Task](task-reference.html#configure-saml-authentication)

### <a id='create-vm'></a>create-vm
Creates an unconfigured Ops Manager VM.

```bash
p-automator create-vm \
  --config path/to/opsman-config.yml
```

[Example Task](task-reference.html#create-vm)

This command requires a config file specific to the IaaS being deployed to.
Please see the [configuration](configuration.html#create-vm) page for more specific examples.

### <a id='delete-vm'></a>delete-vm
Deletes the Ops Manager VM instantiated by [create-vm](#create-vm).
Currently **vSphere, GCP, AWS, Azure, and Openstack**.

```bash
p-automator delete-vm \
  --state path/to/state.yml \
  --config path/to/opsman-config.yml
```

[Example Task](task-reference.html#delete-vm)

This command requires the state file generated [create-vm](#create-vm).

### <a id='export-installation'></a>export-installation
Exports an existing Ops Manager to a file.

This is the first part of the backup/restore and upgrade lifecycle processes.
This command is used on a fully installed and healthy Ops Manager to export
settings to an upgraded version of Ops Manager.

```bash
p-automator export-installation \
  --auth-file path/to/auth.yml \
  --output-file path/to/installation.zip
```

[Example Task](task-reference.html#export-installation)

<%= partial 'export_installation_note' %>

### <a id='import-installation'></a>import-installation
Imports a previously exported installation to Ops Manager.

This is a part of the backup/restore and upgrade lifecycle processes.
This command is used after an installation has been exported and a new Ops Manager
has been deployed, but before the new Ops Manager is configured.

```bash
p-automator import-installation \
  --auth-file path/to/auth.yml \
  --installation path/to/installation.zip
```

[Example Task](task-reference.html#import-installation)

### <a id='stage-product'></a>stage-product

Stages an uploaded product.
(Unstaged products cannot be configured or installed.)
While this command takes a product path,
it does not upload the product.

In our example task,
this command is used immediately after `upload-product`.
The two commands are usually used together,
though it is possible to invoke them separately.

```bash
p-automator stage-product \
  --auth-file path/to/auth.yml \
  --product path/to/product.pivotal
```

[Example Task](task-reference.html#upload-and-stage-product)

### <a id='staged-config'></a>staged-config
Downloads the configuration for a product from Ops Manager.

Not to be confused with Ops Manager's
built-in [export](https://docs.pivotal.io/pivotalcf/2-1/customizing/backup-restore/backup-pcf-bbr.html#export),
which puts all deployed products and configurations into a single file,
intended for import as part of backup/restore and upgrade lifecycle processes.

```bash
p-automator staged-config \
  --auth-file path/to/auth.yml \
  --product-name example-product \
  --output-file path/to/example-product-config.yml
```

Note that the `--output-file` argument is optional.
If it's excluded, the downloaded config will be written to stdout.

[Example Task](task-reference.html#staged-config)

### <a id='staged-director-config'></a>staged-director-config
Downloads configuration for the BOSH director from Ops Manager.

```bash
p-automator staged-director-config \
  --auth-file path/to/auth.yml \
  --output-file path/to/director-config.yml
```

[Example Task](task-reference.html#staged-director-config)

### <a id='upgrade-opsman'></a>upgrade-opsman
Upgrades an existing Ops Manager to a new given Ops Manager version

```bash
p-automator upgrade-opsman \
  --state-file path/to/state.yml \ #from create-vm
  --image-file path/to/pivnet/image \
  --config path/to/opsman-config.yml \
  --installation path/to/installation.zip \
  --auth-file path/to/auth.yml
```

For more information about this command and how it works, see the [upgrade](upgrade.html) page.

[Example Task](task-reference.html#upgrade-opsman)

### <a id='upload-product'></a>upload-product
Uploads a product to the Ops Manager specified in the config file.

```bash
p-automator upload-product \
  --auth-file path/to/auth.yml \
  --product path/to/product.pivotal
```

Optionally, consumes a yaml config file specifying
`version` and/or `shasum`.

If either is specified,
any values provided will be checked against the product file provided,
and upload will fail if any don't match.

```bash
p-automator upload-product \
  --auth-file path/to/auth.yml \
  --product path/to/product.pivotal
  --config path/to/product-config.yml
```

Here's an example of the values
this command uses from the product config file:

```yaml
version: 1.2.3-build.4
shasum: 7B9C0389ACF248FB9759B3A84CE52AD361B120714E408A0F9F8EBC88462873E6
```

After upload, product needs to be [staged](#stage-product)
before it can be configured or installed.

In our example task,
this command is used immediately before `stage-product`.
The two commands are usually used together,
though it is possible to invoke them separately.

[Example Task](task-reference.html#upload-and-stage-product)

### <a id='upload-stemcell'></a>upload-stemcell
Uploads a stemcell to Ops Manager.

Note that the filename of the stemcell must be exactly as downloaded from Pivnet.
Ops Manager parses this filename to determine the version and OS of the stemcell.

```bash
p-automator upload-stemcell \
  --auth-file path/to/auth.yml \
  --stemcell path/to/stemcell.tgz
```

[Example Task](task-reference.html#upload-stemcell)
