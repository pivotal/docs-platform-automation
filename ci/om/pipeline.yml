---
resource_types:
- name: pull-request
  type: registry-image
  source:
    repository: jtarchie/pr

- name: pivnet
  type: registry-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: docs-platform-automation
  type: git
  source:
    uri: https://github.com/pivotal/docs-platform-automation

- name: om
  type: git
  source:
    uri: git@github.com:pivotal-cf/om.git
    branch: main
    ignore_paths:
    - version
    - README.md
    - docs
    private_key: ((om.private_key))
    fetch_tags: false

- name: om-pr
  type: pull-request
  source:
    repo: pivotal-cf/om
    access_token: ((om.access_token))

- name: om-version
  type: semver
  source:
    initial_version: 0.0.0
    driver: git
    uri: git@github.com:pivotal-cf/om.git
    branch: main
    file: version
    private_key: ((om.private_key))

- name: paving
  type: git
  source:
    uri: https://github.com/pivotal/paving

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.pivnet_products))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.pivnet_products))
    regexp: .*image-(.*).tgz

- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: 2\.[0-9]+\.[0-9]+$
    sort_by: semver

- name: deployments
  type: git
  source:
    uri: git@github.com:pivotal/platform-automation-deployments
    private_key: ((platform_automation_deployments.private_key))
    branch: main

- name: ops-manager-example-prod
  type: s3
  source:
    bucket: example-product-pivotal-files
    private: false
    regexp: '^example-product-(2\.8\.\d+-committed.+)\.pivotal$'

- name: om-image
  type: docker-image
  source:
    repository: ((docker.om-repository))
    username: ((docker.username))
    password: ((docker.password))

jobs:
- name: test-om
  serial: true
  plan:
  - in_parallel:
    - get: om
      trigger: true
    - get: docs-platform-automation
  - in_parallel:
    - task: download-product
      params:
        OM_pivnet_token: ((pivnet_token))
      file: docs-platform-automation/ci/tasks/download-product.yml
    - task: test
      attempts: 3
      file: om/ci/tasks/tests/task.yml
    - task: write-readme
      file: om/ci/tasks/readme/task.yml
  - put: om
    params:
      repository: om-updated-readme/om
      rebase: true
- name: test-om-pr
  public: true
  plan:
  - get: om
  - get: om-pr
    trigger: true
    version: every
  - put: om-pr
    params:
      path: om-pr
      status: pending
  - task: unit-test
    input_mapping:
      om: om-pr
    file: om/ci/tasks/tests/task.yml
    on_failure:
      put: om-pr
      params:
        path: om-pr
        status: failure
    on_success:
      put: om-pr
      params:
        path: om-pr
        status: success

- name: run-om
  serial: true
  plan:
  - in_parallel:
    - get: om
      passed: ["test-om"]
      trigger: true
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: opsman-image
      params:
        globs:
          - '*gcp*.yml'
          - '*GCP.yml'
    - get: om-image
    - get: docs-platform-automation
    - get: paving
    - get: deployments
    - get: ops-manager-example-prod
  - put: om-image
    params:
      build: ci
      dockerfile: docs-platform-automation/ci/dockerfiles/Dockerfile.om
  - task: run-terraform
    file: docs-platform-automation/ci/tasks/create-infrastructure/task.yml
    params:
      IAAS: gcp
      DEPLOYMENT_NAME: ci-om
      OM_PASSWORD: ((opsman-login.password))
      OM_USERNAME: ((opsman-login.username))
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      config: paving
      tasks: platform-automation-tasks
      vars: deployments
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: config/ci/configuration/gcp/director.yml config/ci/configuration/gcp/ops-manager.yml config/ci/configuration/auth.yml
      VARS_PATHS: vars/ci-om/terraform-vars.yml
  - task: create-vm
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: deployments
      config: paving
      vars: deployments
    params:
      STATE_FILE: ci-om/state.yml
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-om/terraform-vars.yml
    image: platform-automation-image
    ensure:
      do:
      - task: state-file
        file: platform-automation-tasks/tasks/make-git-commit.yml
        params:
          GIT_AUTHOR_NAME: platform-automation
          GIT_AUTHOR_EMAIL: platformautomation@groups.vmware.com
          COMMIT_MESSAGE: "create-vm update state file for ci-om"
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ci-om/state.yml
        input_mapping:
          repository: deployments
          file-source: generated-state
        image: platform-automation-image
      - put: deployments
        params:
          rebase: true
          repository: repository-commit
  - task: configure-authentication
    file: platform-automation-tasks/tasks/configure-authentication.yml
    image: om-image
    attempts: 20
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: ci-om/env.yml
      AUTH_CONFIG_FILE: ci/configuration/auth.yml
      VARS_FILES: env/ci-om/terraform-vars.yml
  - task: configure-director
    file: platform-automation-tasks/tasks/configure-director.yml
    image: om-image
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: ci-om/env.yml
      VARS_FILES: env/ci-om/terraform-vars.yml
      DIRECTOR_CONFIG_FILE: ci/configuration/gcp/director.yml
  - task: apply-director-changes
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: om-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: staged-director-config
    file: platform-automation-tasks/tasks/staged-director-config.yml
    image: om-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: upload-product
    image: om-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      env: deployments
      product: ops-manager-example-prod
    params:
      ENV_FILE: ci-om/env.yml
  - task: stage-product
    image: om-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: ops-manager-example-prod
      env: deployments
      config: paving
    params:
      ENV_FILE: ci-om/env.yml
      VARS_FILES: env/ci-om/terraform-vars.yml
  - task: configure-product
    image: om-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: deployments
      config: deployments
    params:
      ENV_FILE: ci-om/env.yml
      CONFIG_FILE: ci-om/example-product.yml
      VARS_FILES: env/ci-om/terraform-vars.yml
  - task: apply-changes
    image: om-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: export-installation
    file: platform-automation-tasks/tasks/export-installation.yml
    image: om-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: import-installation
    file: platform-automation-tasks/tasks/import-installation.yml
    image: om-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: delete-installation
    file: platform-automation-tasks/tasks/delete-installation.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-om/env.yml
  - task: delete-opsman-vm
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: generated-state
      config: paving
      vars: deployments
    params:
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-om/terraform-vars.yml
    image: platform-automation-image
    ensure:
      do:
      - task: state-file
        file: platform-automation-tasks/tasks/make-git-commit.yml
        params:
          GIT_AUTHOR_NAME: platform-automation
          GIT_AUTHOR_EMAIL: platformautomation@groups.vmware.com
          COMMIT_MESSAGE: "delete-vm update state file for support at ci-om"
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ci-om/state.yml
        input_mapping:
          repository: deployments
          file-source: generated-state
        image: platform-automation-image
      - put: deployments
        params:
          rebase: true
          repository: repository-commit
  - task: delete-infrastructure
    file: docs-platform-automation/ci/tasks/delete-infrastructure/task.yml
    params:
      IAAS: gcp
      DEPLOYMENT_NAME: ci-om
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments

- name: delete-infrastructure
  serial: true
  plan:
  - in_parallel:
    - get: docs-platform-automation
    - get: deployments
    - get: paving
  - task: delete-infrastructure
    file: docs-platform-automation/ci/tasks/delete-infrastructure/task.yml
    params:
      IAAS: gcp
      DEPLOYMENT_NAME: ci-om
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments

#@ for bump in ["patch", "minor", "major"]:
- name: #@ "bump-om-" + bump
  plan:
  - in_parallel:
    - get: om
      passed: [run-om]
    - get: om-version
      params:
        bump: #@ bump
  - put: om
    params:
      repository: om
      only_tag: true
      tag: om-version/version
  - task: build
    file: om/ci/tasks/build/task.yml
    params:
      GITHUB_TOKEN: ((om.access_token))
  - put: om-version
    params:
      bump: #@ bump
#@ end

