#@ load("@ytt:data", "data")
#@ deployments_without_gcp = [x for x in data.values.deployments if x.paving_dir != "gcp"]
groups:
- name: ci
  jobs:
  - additional-task-testing
  - build-binaries-image-combined
  - build-ci-image
  - build-packages-image
  - bump-version-to-major
  - check-for-secrets-in-tasks
  #@ for/end deployment in data.values.deployments:
  - #@ deployment.env_name + "-delete-infrastructure"
  #@ for/end deployment in deployments_without_gcp:
  - #@ "run-tasks-in-" + deployment.env_name + "-job"
  - create-pks-cluster-in-reference-pipeline
  - prepare-resource-for-reference-pipeline
  - promote-to-final
  - reference-gcp-delete-infrastructure
  - test-image-dependency-stability
  - upgrade-opsman-gcp
- name: bump
  jobs:
  - bump-test-image-dependency-stability
  - bump-previous-versions-trigger
  #@ for/end version in data.values.versions:
  - #@ "update-" + version.number
  - empty-cve-patch-notes-file
- name: om
  jobs:
  #@ for/end bump in ["patch", "minor", "major"]:
  - #@ "bump-om-" + bump
resources:
- name: docs-platform-automation-reference-pipeline-config
  type: git
  source:
    branch: develop
    uri: https://github.com/pivotal/docs-platform-automation-reference-pipeline-config
- name: ci-image
  type: registry-image
  source:
    password: ((docker.password))
    repository: ((docker.ci-repository))
    tag: testing
    username: ((docker.username))
- name: docs-platform-automation
  type: git
  source:
    branch: develop
    private_key: ((platform_automation_docs.private_key))
    uri: git@github.com:pivotal/docs-platform-automation
    ignore_paths:
      - docs
- name: docs-platform-automation-with-docs
  type: git
  source:
    branch: develop
    private_key: ((platform_automation_docs.private_key))
    uri: git@github.com:pivotal/docs-platform-automation
- name: pas-windows
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pas-windows
    product_version: 2\.[0-9]+\.[0-9]+$
    sort_by: semver
- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: 2\.[0-9]+\.[0-9]+$
    sort_by: semver
- name: opsman-image-2.9.1
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: 2\.9\.1$
- name: opsman-image-2.9.x
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: 2\.9\.[0-9]+$
    sort_by: semver
- name: pks-cli
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pivotal-container-service
    product_version: 1\.9\.[0-9]+$
    sort_by: semver
- name: packages-image
  type: registry-image
  source:
    password: ((docker.password))
    repository: internalpcfplatformautomation/platform-automation
    tag: packages
    username: ((docker.username))
- name: packages-image-oci
  type: registry-image
  source:
    password: ((docker.password))
    repository: internalpcfplatformautomation/platform-automation
    tag: packages
    username: ((docker.username))
- name: binaries-image
  type: registry-image
  source:
    password: ((docker.password))
    repository: internalpcfplatformautomation/platform-automation
    tag: testing
    username: ((docker.username))
- name: vsphere-only-image
  type: registry-image
  source:
    password: ((docker.password))
    repository: internalpcfplatformautomation/platform-automation
    tag: vsphere-only
    username: ((docker.username))
- name: pivnet-rc
  type: pivnet
  source:
    access_key_id: ((pivnet_aws_access_key))
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: \d+\.\d+\.\d+
    secret_access_key: ((pivnet_aws_secret_key))
- name: osl
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: open_source_license_Platform_Automation_Toolkit_for_VMware_Tanzu_(.*)_GA.txt
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: odp
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: VMware-Tanzu-platform-automation-toolkit-(.*)-ODP.tar.gz
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: rc-image-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: platform-automation-image-(.*).tgz
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: rc-image-s3-vsphere
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: vsphere-platform-automation-image-(.*).tar.gz
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: rc-tasks-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: platform-automation-tasks-(.*).zip
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: rc-image-receipt-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: image-receipt-(.*)
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: rc-vsphere-image-receipt-s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: vsphere/image-receipt-(.*)
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
  type: s3
- name: osl-validated-image-receipt-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: image-receipt-(.*)
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
  version:
    path: image-receipt-5.1.0-rc.139
- name: image-receipt-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: image-receipt-(.*)
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: platform-automation-tasks-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    regexp: platform-automation-tasks-(.*).zip
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key)) 
- name: platform-automation-image-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    regexp: platform-automation-image-(.*).tgz
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: version
  type: semver
  source:
    driver: s3
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    key: version
    initial_version: 0.0.1-rc.1
- name: daily
  type: time
  source:
    interval: 24h
    location: America/Denver
    start: 5:00 AM
    stop: 6:00 AM
- name: nightly
  type: time
  source:
    interval: 24h
    location: America/Denver
    start: 8:00 PM
    stop: 9:00 PM
- name: deployments
  type: git
  source:
    branch: main
    private_key: ((platform_automation_deployments.private_key))
    uri: git@github.com:pivotal/platform-automation-deployments
- name: paving
  type: git
  source:
    uri: https://github.com/pivotal/paving
- name: govc-cli
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: vmware
    repository: govmomi
- name: credhub-cli
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: cloudfoundry-incubator
    repository: credhub-cli
- name: bbr-cli
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
- name: bosh-cli
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: cloudfoundry
    repository: bosh-cli
- name: winfs-injector
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: pivotal-cf
    repository: winfs-injector
- name: isolation-segment-replicator
  type: github-release
  source:
    access_token: ((om.access_token))
    owner: pivotal-cf
    repository: replicator
- name: slack
  type: slack-notification
  source:
    url: ((slack_webhook_url))
- name: os-conf-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/os-conf-release
#@ for version in data.values.versions:
- name: #@ "docs-platform-automation-" + version.number
  type: git
  source:
    branch: #@ version.number
    private_key: ((platform_automation_docs.private_key))
    uri: git@github.com:pivotal/docs-platform-automation
- name: #@ "platform-automation-" + version.number
  type: git
  source:
    branch: #@ version.number
    private_key: ((platform_automation_docs.private_key))
    uri: git@github.com:pivotal/docs-platform-automation
- name: #@ "pivnet-release-" + version.number
  type: pivnet
  source:
    access_key_id: ((pivnet_aws_access_key))
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: #@ version.regex
    secret_access_key: ((pivnet_aws_secret_key))
- name: #@ "version-" + version.number
  type: semver
  source:
    driver: s3
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    key: #@ "version-" + version.number
#@ end
- name: binaries-table
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.release_candidate))
    regexp: bump-image-cli-versions-(.*).md
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
- name: om
  type: git
  source:
    uri: git@github.com:pivotal-cf/om.git
    branch: main
    ignore_paths:
    - version
    - README.md
    - docs
    private_key: ((om.private_key))
    fetch_tags: false
- name: om-version
  type: semver
  source:
    initial_version: 0.0.0
    driver: git
    uri: git@github.com:pivotal-cf/om.git
    branch: main
    file: version
    private_key: ((om.private_key))
resource_types:
- name: pivnet
  type: registry-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
jobs:
- name: build-ci-image
  plan:
  - get: daily
    trigger: true
  - get: docs-platform-automation
  - task: build-ci-image
    privileged: true
    file: docs-platform-automation/ci/tasks/build-oci-image.yml
    params:
      DOCKERFILE: docs-platform-automation/ci/dockerfiles/Dockerfile.ci
  - put: ci-image
    params: { image: image/image.tar }
    get_params: { skip_download: true }

- name: build-packages-image
  plan:
  - get: daily
    trigger: true
  - get: docs-platform-automation
  - task: build-packages-image
    privileged: true
    file: docs-platform-automation/ci/tasks/build-oci-image.yml
    params:
      DOCKERFILE: docs-platform-automation/ci/dockerfiles/Dockerfile.packages
  - put: packages-image
    params: { image: image/image.tar }

- name: build-binaries-image-combined
  serial_groups:
  - image
  - task
  plan:
  - in_parallel:
    - get: osl
    - get: govc-cli
      trigger: true
      params:
        globs:
          - 'govc_Linux_x86_64*'
    - get: bosh-cli
      trigger: true
      params:
        globs:
        - '*linux*'
    - get: credhub-cli
      trigger: true
      params:
        globs:
          - '*linux*'
    - get: bbr-cli
      trigger: true
      params:
        globs:
        - 'bbr-[^s3]*linux*[^.sha256]'
    - get: winfs-injector
      trigger: true
      params:
        globs:
        - '*linux'
    - get: isolation-segment-replicator
      trigger: true
      params:
        globs:
        - '*linux'
    - get: om
      trigger: true
    - get: docs-platform-automation
      trigger: false
    - get: packages-image
      trigger: true
      passed:
      - build-packages-image
    - get: packages-image-oci
      params: { format: oci }
    - get: version
      params:
        pre: rc
  - in_parallel:
    - task: download-product
      params:
        OM_pivnet_token: ((pivnet_token))
      file: docs-platform-automation/ci/tasks/download-product.yml
      privileged: true
    - task: test
      attempts: 3
      file: docs-platform-automation/ci/tasks/test-and-build-om.yml
      privileged: true
  - task: build-binaries-image
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      params:
        DOCKERFILE: docs-platform-automation/ci/dockerfiles/Dockerfile.binaries
        IMAGE_ARG_base_image: packages-image-oci/image.tar
      inputs:
        - name: bbr-cli
        - name: bosh-cli
        - name: isolation-segment-replicator
        - name: om-cli
        - name: winfs-injector
        - name: govc-cli
        - name: credhub-cli
        - name: docs-platform-automation
        - name: packages-image-oci
      outputs:
        - name: image
      run:
        path: build
    output_mapping: { image: binaries-image-oci }
  - put: binaries-image
    params: { image: binaries-image-oci/image.tar }
  - task: build-vsphere-image
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      params:
        DOCKERFILE: docs-platform-automation/ci/dockerfiles/Dockerfile.vsphere-only
        IMAGE_ARG_base_image: binaries-image-oci/image.tar
      inputs:
        - name: docs-platform-automation
        - name: binaries-image-oci
      outputs:
        - name: image
      run:
        path: build
  - put: vsphere-only-image
    params: { image: image/image.tar }
  - in_parallel:
    - task: define-cli-versions
      image: binaries-image
      file: docs-platform-automation/ci/tasks/pivnet-release/define-cli-versions.yml
    - task: generate-dpkg-list-for-osl
      file: docs-platform-automation/ci/tasks/generate-dpkg-list-for-OSL.yml
      image: binaries-image
    - task: generate-dpkg-list-for-osl
      file: docs-platform-automation/ci/tasks/generate-dpkg-list-for-OSL.yml
      output_mapping:
        rc-image-receipt-s3: rc-vsphere-image-receipt-s3
      image: vsphere-only-image
    - task: create-release-file
      privileged: true
      file: docs-platform-automation/ci/tasks/package-for-release/platform-automation.yml
      input_mapping:
        platform-automation-image: binaries-image
        vsphere-platform-automation-image: vsphere-only-image
  - in_parallel:
    - task: test-docker-import
      privileged: true
      file: docs-platform-automation/ci/tasks/test-docker-import/task.yml
    - task: test-docker-import
      privileged: true
      file: docs-platform-automation/ci/tasks/test-docker-import/task.yml
      params:
        PRODUCT_PATH: vsphere-platform-automation-image-*.tar.gz
  - in_parallel:
      limit: 3
      steps:
      - put: rc-image-receipt-s3
        params:
          file: rc-image-receipt-s3/image-receipt-*
          acl: public-read
      - put: rc-vsphere-image-receipt-s3
        params:
          file: rc-vsphere-image-receipt-s3/image-receipt-*
          acl: public-read
      - put: rc-image-s3
        params:
          file: packaged-product/platform-automation-image-*.tgz
        get_params:
          skip_download: "true"
      - put: rc-image-s3-vsphere
        params:
          file: packaged-product/vsphere-platform-automation-image-*.tar.gz
        get_params:
          skip_download: "true"
      - put: rc-tasks-s3
        params:
          file: packaged-product/platform-automation-tasks-*.zip
        get_params:
          skip_download: "true"
  - put: binaries-table
    params:
      file: cli-versions-table/bump-image-cli-versions*
      acl: public-read
  - put: version
    params:
      file: version/version
- name: test-image-dependency-stability
  plan:
  - in_parallel:
    - get: docs-platform-automation
    - get: binaries-image
      resource: rc-image-s3
      passed: [ build-binaries-image-combined ]
      trigger: true
      params:
        unpack: true
    - get: osl-validated-image-receipt-s3
  - task: generate-stub-version
    config:
      image_resource:
        type: registry-image
        source:
          repository: ((docker.ci-repository))
          tag: testing
      platform: linux
      outputs:
      - name: version
      run:
        path: bash
        args:
        - -c
        - |
          set -eux
          echo "test" > version/version
  - task: generate-dpkg-list-for-osl
    file: docs-platform-automation/ci/tasks/generate-dpkg-list-for-OSL.yml
    image: binaries-image
  - task: check-osl-reuse-validity
    file: docs-platform-automation/ci/tasks/check-osl-reuse-validity.yml
- name: bump-version-to-major
  plan:
  - put: version
    params:
      bump: major
- name: promote-to-final
  plan:
  - in_parallel:
    - get: osl
    - get: docs-platform-automation
    - get: rc-image-s3
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
      params:
        unpack: true
    - get: rc-image-s3-vsphere
      params:
        unpack: true
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
    - get: platform-automation-tasks
      resource: rc-tasks-s3
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
    - get: om
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
    - get: version
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      params:
        bump: final
  - task: create-release-file
    privileged: true
    file: docs-platform-automation/ci/tasks/package-for-release/platform-automation.yml
    input_mapping:
      platform-automation-image: rc-image-s3
      vsphere-platform-automation-image: rc-image-s3-vsphere
  - task: test-docker-import
    privileged: true
    file: docs-platform-automation/ci/tasks/test-docker-import/task.yml
  - task: generate-platform-automation-metadata
    file: docs-platform-automation/ci/tasks/pivnet-release/generate-platform-automation-metadata-v5.0.yml
  - task: generate-dpkg-list-for-osl
    file: docs-platform-automation/ci/tasks/generate-dpkg-list-for-OSL.yml
    image: rc-image-s3
  - put: pivnet-rc
    params:
      file_glob: packaged-product/*
      metadata_file: metadata/metadata.yml
      s3_filepath_prefix: ((pivnet_s3_filepath_prefix))
  - put: docs-platform-automation
    params:
      repository: docs-platform-automation
      tag: version/version
      tag_prefix: v
  - put: version
    params:
      bump: minor
  - put: image-receipt-s3
    params:
      file: rc-image-receipt-s3/image-receipt-*
      acl: public-read
- name: prepare-resource-for-reference-pipeline
  serial_groups:
  - image
  - task
  plan:
  - in_parallel:
    - get: rc-image-s3
      passed:
      - build-binaries-image-combined
      trigger: true
    - get: rc-tasks-s3
      passed:
      - build-binaries-image-combined
      trigger: true
  - in_parallel:
    - put: platform-automation-image-s3
      params:
        file: rc-image-s3/platform-automation-image-*.tgz
      get_params:
        skip_download: "true"
    - put: platform-automation-tasks-s3
      params:
        file: rc-tasks-s3/platform-automation-tasks-*.zip
      get_params:
        skip_download: "true"
- name: upgrade-opsman-gcp
  serial: true
  serial_groups: [ ci-upgrade ]
  plan:
  - in_parallel:
    - get: om
      passed:
      - build-binaries-image-combined
    - get: version
      passed:
      - build-binaries-image-combined
    - get: platform-automation-tasks
      resource: rc-tasks-s3
      passed:
      - build-binaries-image-combined
      params:
        unpack: true
    - get: binaries-table
      passed:
      - build-binaries-image-combined
    - get: docs-platform-automation
    - get: paving
    - get: deployments
    - get: platform-automation-image
      resource: rc-image-s3
      passed:
      - build-binaries-image-combined
      trigger: true
      params:
        unpack: true
    - get: rc-image-s3-vsphere
      passed:
      - build-binaries-image-combined
    - get: opsman-image-2.9.1
      params:
        globs:
        - '*gcp*.yml'
    - get: opsman-image-2.9.x
      params:
        globs:
        - '*gcp*.yml'
    - get: opsman-image
      trigger: true
      params:
        globs:
        - '*gcp*.yml'
  - task: run-terraform
    attempts: 2
    file: docs-platform-automation/ci/tasks/create-infrastructure/task.yml
    params:
      IAAS: gcp
      DEPLOYMENT_NAME: ci-upgrade
      OM_PASSWORD: ((opsman-login.password))
      OM_USERNAME: ((opsman-login.username))
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments
  - task: prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      config: paving
      tasks: platform-automation-tasks
      vars: deployments
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: config/ci/configuration/gcp/director.yml config/ci/configuration/auth.yml
      VARS_PATHS: vars/ci-upgrade/terraform-vars.yml
  - in_parallel:
    - task: create-vm
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: opsman-image-2.9.1
        state: deployments
        config: paving
        vars: deployments
      params:
        STATE_FILE: ci-upgrade/state.yml
        OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
        VARS_FILES: vars/ci-upgrade/terraform-vars.yml
      image: platform-automation-image
      ensure:
        do:
        - task: state-file
          file: platform-automation-tasks/tasks/make-git-commit.yml
          params:
            GIT_AUTHOR_NAME: platform-automation-bot
            GIT_AUTHOR_EMAIL: ((platform-automation-email))
            COMMIT_MESSAGE: "create-vm update state file for ci-upgrade"
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ci-upgrade/state.yml
          input_mapping:
            repository: deployments
            file-source: generated-state
          image: platform-automation-image
        - put: deployments
          params:
            rebase: true
            repository: repository-commit
  - task: configure-authentication
    file: platform-automation-tasks/tasks/configure-authentication.yml
    image: platform-automation-image
    attempts: 20
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: ci-upgrade/env.yml
      AUTH_CONFIG_FILE: ci/configuration/auth.yml
      VARS_FILES: env/ci-upgrade/terraform-vars.yml
  - task: configure-director
    file: platform-automation-tasks/tasks/configure-director.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: ci-upgrade/env.yml
      VARS_FILES: env/ci-upgrade/terraform-vars.yml
      DIRECTOR_CONFIG_FILE: ci/configuration/gcp/director.yml
  - task: apply-director-changes
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: stage-configure-apply-telemetry
    file: platform-automation-tasks/tasks/stage-configure-apply.yml
    image: platform-automation-image
    attempts: 3
    input_mapping:
      env: deployments
      config: deployments
      vars: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
      CONFIG_FILE: ci-upgrade/p-telemetry.yml
      STAGE_PRODUCT_CONFIG_FILE: ci-upgrade/p-telemetry.yml
      VARS_FILE: env/ci-upgrade/terraform-vars.yml
  - task: staged-director-config
    file: platform-automation-tasks/tasks/staged-director-config.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: export-installation
    file: platform-automation-tasks/tasks/export-installation.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: upgrade-opsman-patch
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image-2.9.x
      state: deployments
      config: paving
      vars: deployments
      env: deployments
    params:
      STATE_FILE: ci-upgrade/state.yml
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-upgrade/terraform-vars.yml
      ENV_FILE: ci-upgrade/env.yml
    image: platform-automation-image
  - task: apply-director-changes
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: platform-automation-image
    attempts: 5
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: export-installation
    file: platform-automation-tasks/tasks/export-installation.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: upgrade-opsman-minor
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    image: platform-automation-image
    input_mapping:
      image: opsman-image
      state: deployments
      config: paving
      vars: deployments
      env: deployments
    params:
      STATE_FILE: ci-upgrade/state.yml
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-upgrade/terraform-vars.yml
      ENV_FILE: ci-upgrade/env.yml
  - task: apply-director-changes
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: platform-automation-image
    attempts: 5
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: upgrade-opsman
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    image: platform-automation-image
    input_mapping:
      image: opsman-image
      state: deployments
      config: paving
      vars: deployments
      env: deployments
    params:
      STATE_FILE: ci-upgrade/state.yml
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-upgrade/terraform-vars.yml
      ENV_FILE: ci-upgrade/env.yml
  - task: apply-director-changes
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: platform-automation-image
    attempts: 5
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: delete-installation
    file: platform-automation-tasks/tasks/delete-installation.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: ci-upgrade/env.yml
  - task: delete-gcp-opsman-vm
    file: platform-automation-tasks/tasks/delete-vm.yml
    image: platform-automation-image
    input_mapping:
      state: generated-state
      config: paving
      vars: deployments
    params:
      OPSMAN_CONFIG_FILE: ci/configuration/gcp/ops-manager.yml
      VARS_FILES: vars/ci-upgrade/terraform-vars.yml
    ensure:
      do:
      - task: state-file
        file: platform-automation-tasks/tasks/make-git-commit.yml
        params:
          GIT_AUTHOR_NAME: platform-automation-bot
          GIT_AUTHOR_EMAIL: ((platform-automation-email))
          COMMIT_MESSAGE: "delete-vm update state file for ci-upgrade"
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ci-upgrade/state.yml
        input_mapping:
          repository: deployments
          file-source: generated-state
        image: platform-automation-image
      - put: deployments
        params:
          rebase: true
          repository: repository-commit


#@ for deployment in deployments_without_gcp:
#@ env_name = deployment.env_name
#@ opsman_glob = deployment.opsman_glob
#@ tags = deployment.tags
#@ paving_dir = deployment.paving_dir
- name: #@ "run-tasks-in-" + env_name + "-job"
  serial: true
  serial_groups:
  - #@ env_name
  plan:
  - in_parallel:
    - get: om
      passed:
      - build-binaries-image-combined
      tags: #@ tags
    - get: version
      passed:
      - build-binaries-image-combined
      tags: #@ tags
    - get: platform-automation-tasks
      resource: rc-tasks-s3
      passed:
      - build-binaries-image-combined
      params:
        unpack: true
      tags: #@ tags
    - get: binaries-table
      passed:
      - build-binaries-image-combined
      tags: #@ tags
    - get: docs-platform-automation
      tags: #@ tags
    - get: paving
      tags: #@ tags
    - get: deployments
      tags: #@ tags
#@ if deployment.paving_dir == "nsxt":
    - get: platform-automation-image
      passed: [ build-binaries-image-combined ]
      resource: rc-image-s3-vsphere
      tags: #@ tags
      params:
        unpack: true
    - get: rc-image-s3
      passed: [ build-binaries-image-combined ]
      trigger: true
      params:
        unpack: true
      tags: #@ tags
#@ else:
    - get: platform-automation-image
      passed: [ build-binaries-image-combined ]
      resource: rc-image-s3
      tags: #@ tags
      params:
        unpack: true
    - get: rc-image-s3-vsphere
      passed: [ build-binaries-image-combined ]
      trigger: true
      params:
        unpack: true
      tags: #@ tags
#@ end
    - get: opsman-image
      trigger: true
      params:
        globs:
        - #@ opsman_glob
      tags: #@ tags
  - task: run-terraform
    attempts: 2
    tags: #@ tags
    file: docs-platform-automation/ci/tasks/create-infrastructure/task.yml
    params:
      IAAS: #@ paving_dir
      DEPLOYMENT_NAME: #@ env_name
      OM_PASSWORD: ((opsman-login.password))
      OM_USERNAME: ((opsman-login.username))
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      tags: #@ tags
      params:
        rebase: true
        repository: deployments
  - task: prepare-tasks-with-secrets
    tags: #@ tags
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      config: paving
      tasks: platform-automation-tasks
      vars: deployments
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: #@ "config/ci/configuration/" + paving_dir + "/director.yml config/ci/configuration/auth.yml"
      VARS_PATHS: #@ "vars/" + env_name + "/terraform-vars.yml"
  - task: create-vm
    tags: #@ tags
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: deployments
      config: paving
      vars: deployments
    params:
      STATE_FILE: #@ env_name + "/state.yml"
      OPSMAN_CONFIG_FILE: #@ "ci/configuration/" + paving_dir + "/ops-manager.yml"
      VARS_FILES: #@ "vars/" + env_name + "/terraform-vars.yml"
      GOTRACEBACK: all
    image: platform-automation-image
    ensure:
      do:
      - task: state-file
        tags: #@ tags
        file: platform-automation-tasks/tasks/make-git-commit.yml
        params:
          GIT_AUTHOR_NAME: platform-automation-bot
          GIT_AUTHOR_EMAIL: ((platform-automation-email))
          COMMIT_MESSAGE: #@ "create-vm update state file for " + env_name
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: #@ env_name + "/state.yml"
        input_mapping:
          repository: deployments
          file-source: generated-state
        image: platform-automation-image
      - put: deployments
        tags: #@ tags
        params:
          rebase: true
          repository: repository-commit
  - task: create-vm
    tags: #@ tags
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: deployments
      config: paving
      vars: deployments
    params:
      STATE_FILE: #@ env_name + "/state.yml"
      OPSMAN_CONFIG_FILE: #@ "ci/configuration/" + paving_dir + "/ops-manager.yml"
      VARS_FILES: #@ "vars/" + env_name + "/terraform-vars.yml"
    image: platform-automation-image
  - task: configure-authentication
    tags: #@ tags
    file: platform-automation-tasks/tasks/configure-authentication.yml
    image: platform-automation-image
    attempts: 20
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: #@ env_name + "/env.yml"
      AUTH_CONFIG_FILE: ci/configuration/auth.yml
      VARS_FILES: #@ "env/" + env_name + "/terraform-vars.yml"
  - task: staged-director-config
    tags: #@ tags
    file: platform-automation-tasks/tasks/staged-director-config.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: #@ env_name + "/env.yml"
  - task: configure-director
    tags: #@ tags
    file: platform-automation-tasks/tasks/configure-director.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
      config: paving
    params:
      ENV_FILE: #@ env_name + "/env.yml"
      VARS_FILES: #@ "env/" + env_name + "/terraform-vars.yml"
      DIRECTOR_CONFIG_FILE: #@ "ci/configuration/" + paving_dir + "/director.yml"
  - task: apply-director-changes
    tags: #@ tags
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: #@ env_name + "/env.yml"
  - task: staged-director-config
    tags: #@ tags
    file: platform-automation-tasks/tasks/staged-director-config.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: #@ env_name + "/env.yml"
  - task: delete-installation
    tags: #@ tags
    file: platform-automation-tasks/tasks/delete-installation.yml
    image: platform-automation-image
    input_mapping:
      env: deployments
    params:
      ENV_FILE: #@ env_name + "/env.yml"
  - task: #@ "delete-" + env_name + "-opsman-vm"
    tags: #@ tags
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: generated-state
      config: paving
      vars: deployments
    params:
      OPSMAN_CONFIG_FILE: #@ "ci/configuration/" + paving_dir + "/ops-manager.yml"
      VARS_FILES: #@ "vars/" + env_name + "/terraform-vars.yml"
    image: platform-automation-image
    ensure:
      do:
      - task: state-file
        tags: #@ tags
        file: platform-automation-tasks/tasks/make-git-commit.yml
        params:
          GIT_AUTHOR_NAME: platform-automation-bot
          GIT_AUTHOR_EMAIL: ((platform-automation-email))
          COMMIT_MESSAGE: #@ "delete-vm update state file for " + env_name
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: #@ env_name + "/state.yml"
        input_mapping:
          repository: deployments
          file-source: generated-state
        image: platform-automation-image
      - put: deployments
        tags: #@ tags
        params:
          rebase: true
          repository: repository-commit
#@ end

#@ for deployment in data.values.deployments:
#@ env_name = deployment.env_name
#@ opsman_glob = deployment.opsman_glob
#@ tags = deployment.tags
#@ paving_dir = deployment.paving_dir
- name: #@ env_name + "-delete-infrastructure"
  serial_groups:
  - #@ env_name
  plan:
  - in_parallel:
#@ if deployment.enable_timed_trigger:
    - get: nightly
      trigger: true
      tags: #@ tags
#@ end
    - get: docs-platform-automation
      tags: #@ tags
    - get: paving
      tags: #@ tags
    - get: deployments
      tags: #@ tags
    - get: platform-automation-image
      resource: rc-image-s3
      params:
        unpack: true
      tags: #@ tags
    - get: platform-automation-tasks
      resource: rc-tasks-s3
      params:
        unpack: true
      tags: #@ tags
  - task: prepare-tasks-with-secrets
    tags: #@ tags
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      config: paving
      tasks: platform-automation-tasks
      vars: deployments
    output_mapping:
      tasks: platform-automation-tasks
    params:
      CONFIG_PATHS: #@ "config/ci/configuration/" + paving_dir + "/director.yml config/ci/configuration/" + paving_dir + "/ops-manager.yml config/ci/configuration/auth.yml"
      VARS_PATHS: #@ "vars/" + env_name + "/terraform-vars.yml"
  - try:
      task: delete-installation
      tags: #@ tags
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: deployments
      params:
        ENV_FILE: #@ env_name + "/env.yml"
      image: platform-automation-image
  - try:
      task: delete-opsman-vm
      tags: #@ tags
      file: platform-automation-tasks/tasks/delete-vm.yml
      image: platform-automation-image
      input_mapping:
        image: opsman-image
        state: deployments
        config: paving
        vars: deployments
      params:
        STATE_FILE: #@ env_name + "/state.yml"
        OPSMAN_CONFIG_FILE: #@ "ci/configuration/" + paving_dir + "/ops-manager.yml"
        VARS_FILES: #@ "vars/" + env_name + "/terraform-vars.yml"
      ensure:
        do:
        - task: state-file
          tags: #@ tags
          file: platform-automation-tasks/tasks/make-git-commit.yml
          image: platform-automation-image
          params:
            GIT_AUTHOR_NAME: platform-automation-bot
            GIT_AUTHOR_EMAIL: ((platform-automation-email))
            COMMIT_MESSAGE: #@ "delete-vm update state file for " + env_name
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: #@ env_name + "/state.yml"
          input_mapping:
            repository: deployments
            file-source: generated-state
        - put: deployments
          tags: #@ tags
          params:
            rebase: true
            repository: repository-commit
  - try:
      task: delete-infrastructure
      tags: #@ tags
      file: docs-platform-automation/ci/tasks/delete-infrastructure/task.yml
      params:
        IAAS: #@ paving_dir
        DEPLOYMENT_NAME: #@ env_name
        PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
      ensure:
        put: deployments
        tags: #@ tags
        params:
          rebase: true
          repository: deployments
  - task: leftovers
    tags: #@ tags
    file: docs-platform-automation/ci/tasks/leftovers.yml
    params:
      BBL_IAAS: #@ paving_dir
      BBL_AWS_ACCESS_KEY_ID: ((s3.access_key_id))
      BBL_AWS_SECRET_ACCESS_KEY: ((s3.secret_access_key))
      BBL_AWS_REGION: ((s3.region_name))
      BBL_AZURE_CLIENT_ID: ((azure.client_id))
      BBL_AZURE_CLIENT_SECRET: ((azure.client_secret))
      BBL_AZURE_TENANT_ID: ((azure.tenant_id))
      BBL_AZURE_SUBSCRIPTION_ID: ((azure.subscription_id))
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((gcp.service_account))
      BBL_NSXT_PASSWORD: ((nsx.password))
      BBL_NSXT_USERNAME: ((nsx.username))
      BBL_NSXT_MANAGER_HOST: ((nsx.url))
      FILTER: #@ env_name
      DRY_RUN: false
      NO_CONFIRM: true
  - task: remove-state-files
    tags: #@ tags
    file: docs-platform-automation/ci/tasks/delete-state-file.yml
    params:
      DEPLOYMENT: #@ env_name
      PLATFORM_AUTOMATION_EMAIL: ((platform-automation-email))
    ensure:
      put: deployments
      tags: #@ tags
      params:
        rebase: true
        repository: deployments
#@ end
- name: check-for-secrets-in-tasks
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: deployments
    - get: docs-platform-automation
  - task: check-for-secrets
    file: docs-platform-automation/ci/tasks/secrets-verifier/task.yml
    params:
      FLY_USERNAME: ((fly.username))
      FLY_PASSWORD: ((fly.password))
      FLY_TARGET: ((fly.target))
      SECRET_ALLOWLIST: ((secret-allowlist))
    on_failure:
      do:
      - task: create-secret-slack-notification
        file: docs-platform-automation/ci/tasks/create-secret-slack-notification.yml
      - put: slack
        params:
          silent: true
          text_file: notification-text/text
- name: create-pks-cluster-in-reference-pipeline
  serial: true
  plan:
  - in_parallel:
    - get: docs-platform-automation
    - get: deployments
    - get: pks-cli
      params:
        globs:
        - 'tkgi-linux-amd64*'
    - get: rc-image-s3
      passed:
        - build-binaries-image-combined
    - get: rc-image-s3-vsphere
      passed:
        - build-binaries-image-combined
    - get: rc-tasks-s3
      passed:
        - build-binaries-image-combined
      trigger: true
  - task: create-pks-cluster
    file: docs-platform-automation/ci/tasks/create-pks-cluster/task.yml
    params:
      ENV_FILE: deployments/reference-gcp/env.yml
- name: additional-task-testing
  serial: true
  plan:
  - in_parallel:
    - get: docs-platform-automation
    - get: os-conf-release
      version:
        version: 22.0.0
    - get: docs-platform-automation-reference-pipeline-config
    - get: rc-image-s3-vsphere
      passed:
        - create-pks-cluster-in-reference-pipeline
    - get: platform-automation-image
      resource: rc-image-s3
      params:
        unpack: true
      passed:
        - create-pks-cluster-in-reference-pipeline
      trigger: true
    - get: platform-automation-tasks
      resource: rc-tasks-s3
      params:
        unpack: true
      passed:
        - create-pks-cluster-in-reference-pipeline
      trigger: true
    - get: om
      passed:
      - build-binaries-image-combined
    - get: binaries-table
      passed:
      - build-binaries-image-combined
    - get: pas-windows
      params:
        globs:
          - '*.pivotal'
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: docs-platform-automation-reference-pipeline-config
    output_mapping:
      interpolated-files: env
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      PREFIX: /concourse/main/reference-pipeline
      INTERPOLATION_PATHS: .
  - in_parallel:
    - do:
      - task: ensure-clis-versions-run
        image: platform-automation-image
        config:
          platform: linux
          run:
            path: bash
            args:
            - -c
            - |
              set -eux

              # IAASes
              openstack --version
              govc version
              az --version
              gcloud --version
              aws --version

              # vmware owned
              bosh --version
              credhub --version
              winfs-injector --help
              om --version
    - do:
      - task: replicate-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/replicate-product.yml
        input_mapping:
          product: pas-windows
        params:
          REPLICATED_NAME: awesome
      - task: check-replicated-tile
        image: platform-automation-image
        config:
          platform: linux
          inputs:
          - name: replicated-product
          run:
            path: bash
            args:
              - -c
              - |
                set -eux

                test -e replicated-product/awesome.pivotal
                unzip -t replicated-product/awesome.pivotal

    - do:
      - task: get-ca-cert
        image: platform-automation-image
        config:
          platform: linux
          outputs:
            - name: config
          run:
            path: bash
            args:
              - -c
              - |
                set -eux

                echo quit | openssl s_client -showcerts \
                  -servername self-signed.badssl.com \
                  -connect self-signed.badssl.com:443 > config/cacert.pem
      - task: prepare-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/prepare-image.yml
        params:
          CA_CERT_FILES: cacert.pem
      - task: test-ca-cert-worked
        image: platform-automation-image
        config:
          platform: linux
          run:
            path: bash
            args:
              - -c
              - |
                set -eux

                curl -vvv -L https://self-signed.badssl.com
    - do:
      - task: backup-tkgi
        image: platform-automation-image
        file: platform-automation-tasks/tasks/backup-tkgi.yml
        params:
          ENV_FILE: foundations/config/env.yml
          OPSMAN_SSH_PRIVATE_KEY: ((vsphere_private_ssh_key))
      - task: check-backup-tkgi
        image: platform-automation-image
        config:
          platform: linux
          inputs:
            - name: backup
          run:
            path: bash
            args:
              - -c
              - |
                set -eux

                test -e backup/pivotal-container-service*_clusters_*.tgz
                tar -tzf backup/pivotal-container-service*_clusters_*.tgz > /dev/null
    - do:
      - task: download-and-upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-and-upload-product.yml
        input_mapping:
          config: env
        params:
          ENV_FILE: foundations/config/env.yml
          CONFIG_FILE: download-product-pivnet/download-healthwatch.yml
    - do:
      - task: backup-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/backup-director.yml
        params:
          ENV_FILE: foundations/config/env.yml
          OPSMAN_SSH_PRIVATE_KEY: ((vsphere_private_ssh_key))
      - task: check-backup-director
        image: platform-automation-image
        config:
          platform: linux
          inputs:
            - name: backup
          run:
            path: bash
            args:
              - -c
              - |
                set -eux

                test -e backup/director_*.tgz
                tar -tzf  backup/director_*.tgz > /dev/null
    - do:
      - task: update-runtime-config
        image: platform-automation-image
        file: platform-automation-tasks/tasks/update-runtime-config.yml
        input_mapping:
          config: docs-platform-automation
          releases: os-conf-release
        params:
          ENV_FILE: foundations/config/env.yml
          CONFIG_FILE: ci/config/runtime-config.yml
          NAME: my-runtime-config
          OPSMAN_SSH_PRIVATE_KEY: ((vsphere_private_ssh_key))

#! bump jobs
- name: bump-previous-versions-trigger
  serial: true
  plan:
  - in_parallel:
    - get: rc-image-s3-vsphere
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
    - get: binaries-image
      resource: rc-image-s3
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
      params:
        unpack: true
    - get: binaries-table
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
- name: bump-test-image-dependency-stability
  plan:
  - in_parallel:
    - get: docs-platform-automation
    - get: binaries-image
      resource: rc-image-s3
      passed: [ bump-previous-versions-trigger ]
      trigger: true
      params:
        unpack: true
    - get: osl-validated-image-receipt-s3
  - task: generate-stub-version
    config:
      image_resource:
        type: registry-image
        source:
          repository: ((docker.ci-repository))
          tag: testing
      platform: linux
      outputs:
      - name: version
      run:
        path: bash
        args:
        - -c
        - |
          set -eux
          echo "test" > version/version
  - task: generate-dpkg-list-for-osl
    file: docs-platform-automation/ci/tasks/generate-dpkg-list-for-OSL.yml
    image: binaries-image
  - task: check-osl-reuse-validity
    file: docs-platform-automation/ci/tasks/check-osl-reuse-validity.yml
#@ for version in data.values.versions:
- name: #@ "update-" + version.number
  serial_groups: [ bump ]
  plan:
  - in_parallel:
    - get: osl
    - get: odp
    - get: #@ "platform-automation-" + version.number
    - get: #@ "docs-platform-automation-" + version.number
    - get: docs-platform-automation-with-docs
    - get: version
      resource: #@ "version-" + version.number
      params:
        bump: patch
    - get: rc-image-s3-vsphere
      passed: [ bump-previous-versions-trigger ]
      params:
        unpack: true
    - get: binaries-image
      resource: rc-image-s3
      passed: [ bump-previous-versions-trigger ]
      trigger: true
      params:
        unpack: true
    - get: binaries-table
      passed: [ bump-previous-versions-trigger ]
  - task: create-release-notes-for-patch
    file: docs-platform-automation-with-docs/ci/tasks/pivnet-release/generate-release-notes.yml
    params:
      GITHUB_SSH_KEY: ((platform_automation_docs.private_key))
  - task: create-release-file
    privileged: true
    file: docs-platform-automation-with-docs/ci/tasks/package-for-release/platform-automation.yml
    input_mapping:
      docs-platform-automation: docs-platform-automation-with-docs
      platform-automation: #@ "platform-automation-" + version.number
      platform-automation-image: binaries-image
      #@ if version.vsphere_image:
      vsphere-platform-automation-image: rc-image-s3-vsphere
      #@ end
  - in_parallel:
    - task: test-docker-import
      file: docs-platform-automation-with-docs/ci/tasks/test-docker-import/task.yml
      privileged: true
    - task: test-task
      file: #@ "platform-automation-" + version.number + "/tasks/test.yml"
      image: platform-automation-image
      input_mapping:
        platform-automation-tasks: #@ "platform-automation-" + version.number
    - task: generate-platform-automation-metadata
      file: docs-platform-automation-with-docs/ci/tasks/pivnet-release/generate-platform-automation-metadata-bump.yml
      params:
        ALL_USERS: false
    - task: generate-dpkg-list-for-osl
      file: docs-platform-automation-with-docs/ci/tasks/generate-dpkg-list-for-OSL.yml
      image: binaries-image
  - in_parallel:
    - put: #@ "platform-automation-" + version.number
      params:
        repository: #@ "platform-automation-" + version.number
        tag: version/version
        tag_prefix: v
        rebase: true
    - put: image-receipt-s3
      params:
        file: rc-image-receipt-s3/image-receipt-*
        acl: public-read
  - put: #@ "pivnet-release-" + version.number
    params:
      file_glob: packaged-product/*
      metadata_file: metadata/metadata.yml
      s3_filepath_prefix: ((pivnet_s3_filepath_prefix))
  - put: #@ "version-" + version.number
    params:
      file: version/version
  - put: slack
    params:
      silent: true
      text: #@ "A new patch version was released to Tanzunet: " + version.number
#@ end
- name: empty-cve-patch-notes-file
  plan:
    - in_parallel:
      - get: rc-image-s3
        passed:
        #@ for version in data.values.versions:
        - #@ "update-" + version.number
        #@ end
        trigger: true
      - get: docs-platform-automation-with-docs
    - task: empty-cve-patch-notes
      file: docs-platform-automation-with-docs/ci/tasks/pivnet-release/empty-cve-patch-notes.yml
      input_mapping:
        docs-platform-automation: docs-platform-automation-with-docs
    - put: docs-platform-automation-with-docs
      params:
        repository: docs-platform-automation
        rebase: true
#@ for bump in ["patch", "minor", "major"]:
- name: #@ "bump-om-" + bump
  plan:
  - in_parallel:
    - get: om
      passed:
      #@ for/end deployment in deployments_without_gcp:
      - #@ "run-tasks-in-" + deployment.env_name + "-job"
      - upgrade-opsman-gcp
      - additional-task-testing
    - get: om-version
      params:
        bump: #@ bump
  - put: om
    params:
      repository: om
      only_tag: true
      tag: om-version/version
  - task: build
    file: om/ci/tasks/build/task.yml
    params:
      GITHUB_TOKEN: ((om.access_token))
  - put: om-version
    params:
      bump: #@ bump
#@ end
