---
platform: linux
image_resource:
  type: registry-image
  source:
    repository: ((docker.ci-repository))
    tag: testing

inputs:
- name: version
outputs:
- name: metadata

run:
  path: bash
  args:
  - -c
  - |
    set -eux
    VERSION="$(cat version/version)"
    DOC_VERSION=$(echo "$VERSION" | cut -f 1,2 -d '.' --output-delimiter='.')

    # TODO: change according to https://github.com/pivotal-cf/pivnet-resource/tree/master/metadata
    cat >> metadata/metadata.yml <<EOF
    ---
    release:
      version: "$VERSION"
      release_notes_url: "https://docs.pivotal.io/platform-automation/v${DOC_VERSION}/release-notes.html"
      description: |
        Concourse Tasks and Image for installing and automating VMware Tanzu components.
        Semantically versioned.
        See docs for details.
    EOF
    
    if [[ "$VERSION" == *"python-mitigation"* ]]; then
    cat >> metadata/metadata.yml <<EOF
      availability: Selected User Groups Only
      user_group_ids:
        - 255 # See private pivotal/platform-automation-ci git history for more info
        - 356 # See private pivotal/platform-automation-ci git history for more info
    EOF
    else
      if [[ "$ALL_USERS" == "true" ]]; then
    cat >> metadata/metadata.yml <<EOF
      availability: All Users
    EOF
      else
    cat >> metadata/metadata.yml <<EOF
      availability: Admins Only
    EOF
      fi
    fi
    
    cat >> metadata/metadata.yml <<EOF
      release_type: Maintenance Release
      eula_slug: "vmware_eula"
      eccn: "EAR99"
      license_exception: "NLR"
    product_files:
    - file: "packaged-product/platform-automation-image-${VERSION}.tgz"
      upload_as: Docker Image for Concourse Tasks
      description: >
        A docker image for use with
        Platform Automation for PCF Concourse Tasks,
        containing all dependencies.
    - file: "packaged-product/platform-automation-tasks-${VERSION}.zip"
      upload_as: Concourse Tasks
      description: Concourse Tasks to be used in the creation of pipelines to automate PCF.
    - file: "packaged-product/VMware-Tanzu-platform-automation-toolkit-${VERSION}-ODP.tar.gz"
      upload_as: ODP -${VERSION}
      file_type: "Open Source License"
    - file: "packaged-product/open_source_license_Platform_Automation_Toolkit_for_VMware_Tanzu_${VERSION}_GA.txt"
      upload_as: OSL -${VERSION}
      file_type: "Open Source License"
    dependency_specifiers:
      - specifier: 2.3.*
        product_slug: ops-manager
      - specifier: 2.4.*
        product_slug: ops-manager
      - specifier: 2.5.*
        product_slug: ops-manager
      - specifier: 2.6.*
        product_slug: ops-manager
      - specifier: 2.7.*
        product_slug: ops-manager
      - specifier: 2.8.*
        product_slug: ops-manager
      - specifier: 2.9.*
        product_slug: ops-manager
      - specifier: 2.10.*
        product_slug: ops-manager
      - specifier: 3.0.*
        product_slug: ops-manager
    upgrade_path_specifiers:
      - specifier: 4.1.*
      - specifier: 4.0.*
      - specifier: 3.0.*
    EOF

    if [[ "$DOC_VERSION" == "5.0" ]]; then
    echo "Inserting upgrade path specifiers for 5.0..."
    cat >> metadata/metadata.yml <<EOF
      - specifier: 5.0.*
      - specifier: 4.4.*
      - specifier: 4.3.*
      - specifier: 4.2.*
    EOF
    fi

    if [[ "$DOC_VERSION" == "4.4" ]]; then
    echo "Inserting upgrade path specifiers for 4.4..."
    cat >> metadata/metadata.yml <<EOF
      - specifier: 4.4.*
      - specifier: 4.3.*
      - specifier: 4.2.*
    EOF
    fi

    if [[ "$DOC_VERSION" == "4.3" ]]; then
    echo "Inserting upgrade path specifiers for 4.3..."
    cat >> metadata/metadata.yml <<EOF
      - specifier: 4.3.*
      - specifier: 4.2.*
    EOF
    fi

    if [[ "$DOC_VERSION" == "4.2" ]]; then
    echo "Inserting upgrade path specifiers for 4.2..."
    cat >> metadata/metadata.yml <<EOF
      - specifier: 4.2.*
    EOF
    fi
