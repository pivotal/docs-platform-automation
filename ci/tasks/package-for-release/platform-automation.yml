---
platform: linux

inputs:
- name: docs-platform-automation
- name: version
- name: platform-automation
- name: platform-automation-image
  optional: true
- name: vsphere-platform-automation-image
  optional: true
- name: osl
- name: odp
  optional: true

outputs:
- name: packaged-product
- name: platform-automation-image
- name: vsphere-platform-automation-image

image_resource:
  type: registry-image
  source:
    repository: ((docker.ci-repository))
    tag: testing
run:
  path: bash
  args:
    - -c
    - |
      set -eux

      # construct package name
      VERSION="$(cat version/version)"
      TASKS_FILE="platform-automation-tasks-$VERSION.zip"
      IMAGE_FILE="platform-automation-image-$VERSION.tgz"
      VSPHERE_IMAGE_FILE="vsphere-platform-automation-image-$VERSION.tar.gz"

      # create a temp working folder
      mkdir file-store

      # copy tasks to working folder
      mv platform-automation/tasks file-store/tasks

      # pack the tasks to output
      pushd file-store
      zip -r "../packaged-product/$TASKS_FILE" ./
      popd

      function package_for_release {
        image=$1
        path=$2

        # tar the docker image to output
        ls "${path}"/rootfs
        pushd "${path}"/rootfs
        rootfs_level_directories=$(ls)
        popd

        pushd "${path}"
        for dir in $rootfs_level_directories; do
          echo "linking $dir ..."
          ln -sf ./rootfs/"$dir" ./"$dir"
        done
        rm -Rf etc sys proc
        cp -r ./rootfs/etc ./etc
        mkdir -p ./sys
        mkdir -p ./proc


        cp ../version/version var/version
        chown root:root var/version
        chmod 444 var/version
        popd

        cp osl/open_source_license*.txt "${path}"/usr/share/doc/open_source_licenses.txt

        GZIP=-9 tar zcf "packaged-product/${image}" --exclude="./image" -C "${path}" .
      }

      # This makes sure that the final promotion build of these images
      # have the same version as the images diverge in testing paths
      # and come back together in the final promotion job
      if [ -e platform-automation-image/var/version ] && [ -e vsphere-platform-automation-image/var/version ]; then
        set +e
        diff platform-automation-image/var/version vsphere-platform-automation-image/var/version
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "Versions of image inputs did not match. Make sure the image inputs have the same version."
          exit 1
        fi
        set -e
      fi

      # This is to support building the "All" image (only)
      if [ -n "$(ls -A platform-automation-image 2>/dev/null)" ]; then
        package_for_release "${IMAGE_FILE}" platform-automation-image
      fi

      # This is to support building the "vSphere" image (only)
      if [ -n "$(ls -A vsphere-platform-automation-image 2>/dev/null)" ]; then
        package_for_release "${VSPHERE_IMAGE_FILE}" vsphere-platform-automation-image
      fi
        
      # copy OSL and ODP to output for bump pipelines
      cp osl/open_source_license*.txt packaged-product/open_source_license_Platform_Automation_Toolkit_for_VMware_Tanzu_"$VERSION"_GA.txt
      if [ -d odp/ ]; then
        cp odp/VMware-Tanzu-platform-automation-toolkit*.tar.gz packaged-product/VMware-Tanzu-platform-automation-toolkit-"$VERSION"-ODP.tar.gz
      fi
        
