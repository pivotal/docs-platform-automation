---
title: Ops Blocks Command and Task Reference
owner: PCF Norm
---

## <a id='commands'></a> Ops Blocks Commands and Tasks
This document lists each Ops Blocks command,
and provides information about their intentions, inputs, and outputs.

Each command is also used in a Concourse task,
which is linked in order to provide additional examples.

The example tasks come from the [PCF Installer repo](https://github.com/pivotal-cf/pcf-installer).

All commands use an auth file, given in these examples as `auth.yml`.
This auth file controls the target of the command.

The auth file looks like this if you're using internal auth:

```yaml
opsman_url: opsman.example.com
skip_ssl_validation: true
credentials:
  username: example-username
  password: example-password
decryption_passphrase: example-passphrase
```

The auth file looks like this if you're using external/SAML auth:

```yaml
opsman_url: opsman.example.com
skip_ssl_validation: true
credentials:
  client_id: example-client-id
  client_secret: example-secret
decryption_passphrase: example-passphrase
```

### <a id='apply-changes'></a>apply-changes

Triggers an install on the Ops Manager described by the auth file.

```bash
installer apply-changes --auth-file path/to/auth.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/apply-changes.yml)

`apply-changes` can also be used to trigger an install for just the BOSH Director
with the `--skip-deploy-products`/`-sdp` flag.
While the above task and example don't use this capability,
the following do:

```bash
installer apply-changes --auth-file path/to/auth.yml --skip-deploy-products
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/apply-director-changes.yml)

### <a id='configure-authentication'></a>configure-authentication

Configures Ops Manager with an internal userstore and admin user account.
See [configure-saml-authentication](#configure-saml-authentication) to configure an external SAML user store.
Note that this takes `auth.yml` with a `-c`/`--config` rather than the typical `--auth-file`.

```bash
installer configure-authentication --config path/to/auth.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/configure-authentication.yml)

### <a id='configure-director'></a>configure-director
Configures the BOSH Director with settings from a config file.
See [staged-director-config](#staged-director-config),
which can extract a config file.

```bash
installer configure-director \
  --auth-file path/to/auth.yml \
  --config path/to/director-config.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/configure-director.yml)

### <a id='configure-product'></a>configure-product
Configures an individual, staged product with settings from a config file.

Not to be confused with Ops Manager's
built-in [import](https://docs.pivotal.io/pivotalcf/customizing/backup-restore/restore-pcf-bbr.html#deploy-import),
which reads all deployed products and configurations from a single opaque file,
intended for import as part of backup/restore and upgrade lifecycle processes.

See [staged-config](#staged-config),
which can extract a config file,
and [stage-product](#stage-product),
which can stage a product that's been uploaded.

```bash
installer configure-product \
  --auth-file path/to/auth.yml \
  --config path/to/example-product-config.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/configure-product.yml)

`configure-product` also supports loading variables from a file.
While the above task and example don't use that capability,
the following do:

```bash
installer configure-product \
  --auth-file path/to/auth.yml \
  --config path/to/example-product-config.yml \
  --vars-file path/to/example-product-vars.yml \
  --vars-file path/to/more-example-vars.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/configure-product-with-vars.yml)

### <a id='configure-saml-authentication'></a>configure-saml-authentication

Configures Ops Manager with an external SAML user store and admin user account.
See [configure-authentication](#configure-authentication) to configure an internal user store.

Because configuring an external auth source does not use the actual credentials,
it can't just draw them from `auth.yml` like `configure-authentication` does.
It uses these properties, instead:

```yaml
---
opsman_url: opsman.example.com
decryption_passphrase: example-passphrase
saml-configuration:
  idp_metadata: <XML>
  bosh_idp_metadata: https://example.com/some-xml-that-has-metadata
  rbac_admin_group: example-group-name
  rbac_groups_attribute: example-groups-attribute
```

For more details on using SAML,
please refer to the Ops Manager documentation [here][saml-docs]

[saml-docs]:

```bash
installer configure-saml-authentication \
  --config path/to/external-auth-config.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/configure-saml-authentication.yml)

### <a id='export-installation'></a>export-installation
Exports a an existing Ops Manager to a file.

This is the first part of the backup/restore and upgrade lifecycle processes.
This command is used on a fully installed and healthy Ops Manager to export
settings to a upgraded version of Ops Manager.

```bash
installer export-installation \
  --auth-file path/to/auth.yml \
  --output-file path/to/installation.zip
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/export-installation.yml)

### <a id='import-installation'></a>import-installation
Imports a previously exported installation to Ops Manager.

This is a part of the backup/restore and upgrade lifecycle processes.
This command is used after an installation has been exported and a new Ops Manager
has been deployed, but before the new Ops Manager is configured.

```bash
installer import-installation \
  --auth-file path/to/auth.yml \
  --installation path/to/installation.zip
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/import-installation.yml)

### <a id='install-opsman'></a>install-opsman
Creates an unconfigured Ops Manager VM. 
Currently **vSphere-only**.

```bash
installer install-opsman \
  --auth-file path/to/auth.yml \
  --config path/to/opsman-config.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/install-opsman.yml)

### <a id='stage-product'></a>stage-product

Stages an uploaded product.
(Unstaged products cannot be configured or installed.)
While this command takes a product path,
it does not upload the product.

In our example task,
this command is used immediately after `upload-product`.
The two commands are usually used together,
though it is possible to invoke them separately.

```bash
installer stage-product \
  --auth-file path/to/auth.yml \
  --product path/to/product.pivotal
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/upload-and-stage-product.yml)

### <a id='staged-config'></a>staged-config
Downloads the configuration for a product from Ops Manager.

Not to be confused with Ops Manager's
built-in [export](https://docs.pivotal.io/pivotalcf/2-1/customizing/backup-restore/backup-pcf-bbr.html#export),
which puts all deployed products and configurations into a single file,
intended for import as part of backup/restore and upgrade lifecycle processes.

```bash
installer staged-config \
  --auth-file path/to/auth.yml \
  --product-name example-product \
  --output-file path/to/example-product-config.yml
```

Note that the `--output-file` argument is optional.
If it's excluded, the downloaded config will be written to stdout.

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/staged-config.yml)

### <a id='staged-director-config'></a>staged-director-config
Downloads configuration for the BOSH director from Ops Manager.

```bash
installer staged-director-config \
  --auth-file path/to/auth.yml \
  --output-file path/to/director-config.yml
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/staged-director-config.yml)


### <a id='upload-product'></a>upload-product
Uploads a product to the Ops Manager specified in the config file.

After upload, product needs to be [staged](#stage-product)
before it can be configured or installed.

In our example task,
this command is used immediately before `stage-product`.
The two commands are usually used together,
though it is possible to invoke them separately.

```bash
installer upload-product \
  --auth-file path/to/auth.yml \
  --product path/to/product.pivotal
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/upload-and-stage-product.yml)

### <a id='upload-stemcell'></a>upload-stemcell
Uploads a stemcell to Ops Manager.

Note that the filename of the stemcell must be exactly as downloaded from Pivnet.
Ops Manager parses this filename to determine the version and OS of the stemcell.

```bash
installer upload-stemcell \
  --auth-file path/to/auth.yml \
  --stemcell path/to/stemcell.tgz
```

[Example Task](https://github.com/pivotal-cf/pcf-installer/blob/master/tasks/upload-stemcell.yml)
