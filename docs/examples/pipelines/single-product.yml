# The following line helps maintain current documentation at http://docs.pivotal.io.
# code_snippet single-product-pipeline start yaml

# code_snippet single-product-resources-s3 start yaml
resources:
  - name: platform-automation-tasks
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      bucket: ((s3_pivnet_products_bucket))
      regexp: .*tasks-(.*).zip

  - name: platform-automation-image
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      bucket: ((s3_pivnet_products_bucket))
      regexp: .*image-(.*).tgz

  - name: telemetry-collector-binary
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      bucket: ((s3_pivnet_products_bucket))
      regexp: .*telemetry-(.*).tgz

  # code_snippet single-product-resources-s3 end yaml

  # code_snippet single-product-export-installation start yaml
  - name: installation
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      bucket: ((s3_installation_bucket))
      regexp: pks-installation-(.*).zip
  # code_snippet single-product-export-installation end yaml

  # code_snippet single-product-resources-configurations start yaml
  # VM state and foundation configuration
  - name: state
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3_foundation_state_bucket))
      region_name: ((s3_region_name))
      secret_access_key: ((s3_secret_access_key))
      versioned_file: state-pks.yml
      initial_content_text: '{}'
      initial_version: 'empty-start'

  # configurations
  - name: configuration
    type: git
    source:
      private_key: ((docs-ref-pipeline-repo-key.private_key))
      uri: ((docs-ref-pipeline-repo-uri))
      branch: pks
  # code_snippet single-product-resources-configurations end yaml

  # code_snippet single-product-resources-triggers start yaml
  # triggers used to have jobs do something in a timely manner
  - name: one-time-trigger
    type: time
    source:
      interval: 999999h

  - name: daily-trigger
    type: time
    source:
      interval: 24h
  # code_snippet single-product-resources-triggers end yaml

# code_snippet single-product-prepare-tasks-with-secrets start yaml
# This task is used in multiple jobs
# The yaml anchor "*prepare-tasks-with-secrets" is used in its place
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  params:
    VARS_PATHS: vars/vars
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  output_mapping:
    tasks: platform-automation-tasks
# code_snippet single-product-prepare-tasks-with-secrets end yaml

# code_snippet single-product-jobs start yaml
jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: one-time-trigger
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: state
      - task: prepare-tasks-with-secrets
        <<: *prepare-tasks-with-secrets
      - task: download-opsman-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: download-product/opsman.yml
          SOURCE: s3
        input_mapping:
          config: configuration
        output_mapping:
          downloaded-product: opsman-image
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          config: configuration
        params:
          STATE_FILE: state-pks.yml
        ensure: &put-state
          do:
          - put: state
            params:
              file: generated-state/state-pks.yml
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: configuration
          config: configuration
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: configuration
          env: configuration
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: configuration
        params:
          INSTALLATION_FILE: pks-installation-$timestamp.zip
      - put: installation
        params:
          file: installation/pks-installation*.zip

  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: daily-trigger
            trigger: true
          - get: platform-automation-image
            params:
              unpack: true
            passed: [ install-opsman ]
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
      - task: prepare-tasks-with-secrets
        <<: *prepare-tasks-with-secrets
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: configuration
        params:
          INSTALLATION_FILE: pks-installation-$timestamp.zip
      - put: installation
        params:
          file: installation/pks-installation*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [ install ]
    plan:
    - aggregate:
      - get: platform-automation-image
        params:
          unpack: true
        trigger: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: installation
        passed: [ export-installation ]
      - get: configuration
      - get: state
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-opsman-image
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product/opsman.yml
        SOURCE: s3
      input_mapping:
        config: configuration
      output_mapping:
        downloaded-product: opsman-image
    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: opsman-image
        config: configuration
        env: configuration
      params:
        STATE_FILE: state-pks.yml
        INSTALLATION_FILE: pks-installation*.zip
      ensure: *put-state
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        config: configuration
        env: configuration
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: configuration
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        INSTALLATION_FILE: pks-installation-$timestamp.zip
    - put: installation
      params:
        file: installation/pks-installation*.zip

  - name: upload-and-stage-pks
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            trigger: true
            passed: [ "upgrade-opsman" ]
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
      - task: prepare-tasks-with-secrets
        <<: *prepare-tasks-with-secrets
      - task: download-pks
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: download-product/pks.yml
          SOURCE: s3
        input_mapping:
          config: configuration
        output_mapping:
          downloaded-product: pks-product
          downloaded-stemcell: pks-stemcell
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: pks-product
          env: configuration
      - task: upload-pks-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: pks-stemcell

  - name: configure-pks
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pks
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
      - task: prepare-tasks-with-secrets
        <<: *prepare-tasks-with-secrets
      - task: configure-pks
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
          env: configuration
          vars: configuration
        params:
          CONFIG_FILE: pks.yml
          VARS_FILES: vars/vars/pks.yml

  - name: apply-product-changes
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-pks
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
      - task: prepare-tasks-with-secrets
        <<: *prepare-tasks-with-secrets
      - task: pre-deploy-check
        image: platform-automation-image
        file: platform-automation-tasks/tasks/pre-deploy-check.yml
        input_mapping:
          env: configuration
      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: configuration
      - task: check-pending-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/check-pending-changes.yml
        input_mapping:
          env: configuration
        params:
          ALLOW_PENDING_CHANGES: true
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: configuration
        params:
          INSTALLATION_FILE: pks-installation-$timestamp.zip
      - put: installation
        params:
          file: installation/pks-installation*.zip

  - name: collect-telemetry
    serial: true
    serial_groups: [ install ]
    plan:
    - aggregate:
      - get: telemetry-collector-binary
        params:
          unpack: true
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - apply-product-changes
        trigger: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: collect-telemetry-data
      image: platform-automation-image
      file: platform-automation-tasks/tasks/collect-telemetry.yml
      params:
        CONFIG_FILE: telemetry.yml
      input_mapping:
        env: configuration
        config: configuration
    - task: send-telemetry-data
      image: platform-automation-image
      file: platform-automation-tasks/tasks/send-telemetry.yml
      params:
        API_KEY: no-op-test-key
        DATA_FILE_PATH: collected-telemetry-data/FoundationDetails*.tar

# code_snippet single-product-jobs end yaml
# code_snippet single-product-pipeline end
# The previous line helps maintain current documentation at http://docs.pivotal.io.
