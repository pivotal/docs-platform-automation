---
resource_types:
- name: pivnet
  type: registry-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.pivnet_products))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.pivnet_products))
    regexp: .*image-(.*).tgz

- name: paving
  type: git
  source:
    uri: https://github.com/pivotal/paving

- name: concourse-bosh-deployment
  type: git
  source:
    uri: https://github.com/concourse/concourse-bosh-deployment
    branch: release/5.5.x

- name: ci
  type: git
  source:
    private_key: ((platform_automation_ci.private_key))
    uri: git@github.com:pivotal/platform-automation-ci

- name: docs-platform-automation
  type: git
  source:
    uri: https://github.com/pivotal/docs-platform-automation

- name: deployments
  type: git
  source:
    branch: master
    private_key: ((platform_automation_deployments.private_key))
    uri: git@github.com:pivotal/platform-automation-deployments

- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ^2\.7\.\d+$
####
- name: concourse-release
  type: bosh-io-release
  source:
    repository: concourse/concourse-bosh-release
  version:
    version: 5.5.8

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bpm-release
  version:
    version: 1.1.7

- name: bbr-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/backup-and-restore-sdk-release
  version:
    version: 1.15.0

- name: postgres-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/postgres-release
  version:
    version: 41

- name: credhub-release
  type: bosh-io-release
  source:
    repository: pivotal-cf/credhub-release
  version:
    version: 2.5.7

- name: uaa-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/uaa-release
  version:
    version: 74.9.0
####
- name: ubuntu-xenial-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: stemcells-ubuntu-xenial
    product_version: ^621\..*

- name: lock
  type: time
  source: {interval: 999h}

jobs:
<% ["gcp", "aws", "azure"].each do |iaas| %>
- name: create-opsman-<%= iaas %>
  serial_groups: [ install-<%= iaas %> ]
  serial: true
  plan:
  - in_parallel:
    - get: opsman-image
      params:
        globs:
        - '*<%= iaas %>*.yml'
    - get: paving
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: deployments
    - get: ci
    - get: docs-platform-automation
    - get: lock
  - put: lock
  - task: run-terraform
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: hashicorp/terraform
          tag: full
      inputs:
      - name: paving
      - name: deployments
      - name: docs-platform-automation
      outputs:
      - name: deployments
      params:
        DEPLOYMENT: engine-<%= iaas %>
        IAAS: <%= iaas %>
      run:
        path: bash
        args:
        - -c
        - |
          set -eux

          terraform_path=$PWD/paving-$IAAS
          deployment_path=$PWD/deployments/$DEPLOYMENT

          commit() {
            cp $terraform_path/terraform.tfstate $deployment_path
            pushd $deployment_path
              git config --global user.name "platform-automation-ci"
              git config --global user.email "pcf-platform-automation@pivotal.io"
              git add terraform.tfstate

              cp $terraform_path/../terraform-outputs.yml $deployment_path || true
              cp $terraform_path/concourse-url.txt $deployment_path || true
              git add terraform-outputs.yml || true
              git add concourse-url.txt || true
              git commit -m "created a new deployment to test $IAAS" || true
            popd
          }

          trap commit EXIT

          # code_snippet engine-copy-terraform start bash
          # cp -Ra paving/${IAAS} paving-${IAAS}
          mkdir paving-${IAAS}
          cp -a paving/$IAAS/. paving-$IAAS
          cd paving-${IAAS}
          # code_snippet engine-copy-terraform end bash

          cp ../docs-platform-automation/docs/examples/engine/terraform-templates/${IAAS}.tf $terraform_path
          cp $deployment_path/terraform.tfstate $terraform_path || true
          cp $deployment_path/terraform.tfvars $terraform_path

          # code_snippet engine-terraform-init start bash
          terraform init
          # code_snippet engine-terraform-init end bash

          # code_snippet engine-terraform-refresh start bash
          terraform refresh \
            -var-file terraform.tfvars
          # code_snippet engine-terraform-refresh end bash

          # code_snippet engine-terraform-plan start bash
          terraform plan \
            -out terraform.tfplan \
            -var-file terraform.tfvars
          # code_snippet engine-terraform-plan end bash

          # code_snippet engine-terraform-apply start bash
          terraform apply \
            -parallelism=5 \
            terraform.tfplan
          # code_snippet engine-terraform-apply end bash

          # code_snippet engine-terraform-vars start bash
          terraform output stable_config > ../terraform-outputs.yml
          # code_snippet engine-terraform-vars end bash

          # code_snippet engine-terraform-concourse-url start bash
          export CONCOURSE_URL=$(terraform output concourse_url)
          # code_snippet engine-terraform-concourse-url end bash

          terraform output concourse_url > concourse-url.txt

    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments

  - &generate-config
    task: generate-config
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: internalpcfplatformautomation/ci
          tag: testing
      inputs:
      - name: deployments
      - name: paving
      - name: docs-platform-automation
      outputs:
      - name: config
      - name: env
      - name: vars
      - name: state
      params:
        DEPLOYMENT: engine-<%= iaas %>
        IAAS: <%= iaas %>
      run:
        path: bash
        args:
        - -c
        - |
          set -eux

          output_path=$PWD/deployments/"$DEPLOYMENT"/terraform-outputs.yml

          echo "Attempting to copy optional files to outputs..."
          cp deployments/"$DEPLOYMENT"/state.yml state/ || true

          bosh int -l "$output_path" --vars-env=TF_VARS paving/ci/configuration/"$IAAS"/ops-manager.yml > config/opsman.yml
          cat docs-platform-automation/docs/examples/engine/vm-extensions/"$IAAS".yml >> paving/ci/configuration/"$IAAS"/director.yml
          bosh int -l "$output_path" --vars-env=TF_VARS paving/ci/configuration/"$IAAS"/director.yml > config/director.yml
          bosh int -l "$output_path" --vars-env=TF_VARS deployments/"$DEPLOYMENT"/env.yml > env/env.yml

          cp $output_path vars/terraform-outputs.yml
          cp $PWD/deployments/"$DEPLOYMENT"/concourse-url.txt vars/concourse-url.txt

          echo "Config generation nominal"

  - task: create-vm
    file: platform-automation-tasks/tasks/create-vm.yml
    params:
      RECREATE: true
    input_mapping:
      image: opsman-image
    image: platform-automation-image
    ensure:
      do:
      - task: state-file
        file: platform-automation-tasks/tasks/make-git-commit.yml
        image: platform-automation-image
        params:
          GIT_AUTHOR_NAME: norm-ci
          GIT_AUTHOR_EMAIL: pcf-norm@pivotal.io
          COMMIT_MESSAGE: "create-vm update state file for engine-<%= iaas %>"
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: engine-<%= iaas %>/state.yml
        input_mapping:
          repository: deployments
          file-source: generated-state
      - put: deployments
        params:
          rebase: true
          repository: repository-commit
- name: deploy-and-test-<%= iaas %>
  serial_groups: [ install-<%= iaas %> ]
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: deployments
    - get: concourse-release
    - get: bpm-release
    - get: bbr-release
    - get: postgres-release
    - get: credhub-release
    - get: uaa-release
    - get: concourse-bosh-deployment
    - get: docs-platform-automation
    - get: lock
      trigger: true
      passed: [ create-opsman-<%= iaas %> ]
    - get: ci
    - get: paving
    - get: ubuntu-xenial-stemcell
      params:
        <% if iaas == "gcp" %>
        globs: ["light*google*"]
        <% elsif iaas == "azure" %>
        globs: ["*<%= iaas %>*"]
        <% else %>
        globs: ["light*<%= iaas %>*"]
        <% end %>
  - *generate-config

  - task: versions
    image: platform-automation-image
    config:
      inputs:
      - name: concourse-bosh-deployment
      - name: docs-platform-automation
      - name: config
      - name: vars
      platform: linux
      run:
        path: bash
        args:
        - -c
        - |
          set -eux

          apt-get -y install wget

          bosh interpolate concourse-bosh-deployment/cluster/concourse.yml \
            -o concourse-bosh-deployment/cluster/operations/uaa.yml \
            -o concourse-bosh-deployment/cluster/operations/credhub-colocated.yml \
            -o concourse-bosh-deployment/cluster/operations/backup-atc-colocated-web.yml \
            -l concourse-bosh-deployment/versions.yml | \
          om interpolate --path /releases --skip-missing | \
          grep url | \
          awk '{ print $2 }' | \
          xargs wget --content-disposition

  - task: deploy-it
    image: platform-automation-image
    config:
      inputs:
      - name: deployments
      - name: env
      - name: vars
      - name: concourse-release
      - name: bpm-release
      - name: bbr-release
      - name: postgres-release
      - name: credhub-release
      - name: uaa-release
      - name: ubuntu-xenial-stemcell
      - name: config
      - name: concourse-bosh-deployment
      - name: ci
      - name: docs-platform-automation
      platform: linux
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -euxo pipefail

          cat > concourse-bosh-deployment/versions.yml <<EOL
          concourse_version: $(cat concourse-release/version)
          concourse_sha1: $(cat concourse-release/sha1)
          bpm_version: $(cat bpm-release/version)
          bpm_sha1: $(cat bpm-release/sha1)
          postgres_version: $(cat postgres-release/version)
          postgres_sha1: $(cat postgres-release/sha1)
          bbr_sdk_version: $(cat bbr-release/version)
          bbr_sdk_sha1: $(cat bbr-release/sha1)
          uaa_version: $(cat uaa-release/version)
          uaa_sha1: $(cat uaa-release/sha1)
          credhub_version: $(cat credhub-release/version)
          credhub_sha1: $(cat credhub-release/sha1)
          EOL

          cp env/env.yml env.yml
          cp config/director.yml director-config.yml
          cp vars/terraform-outputs.yml terraform-outputs.yml
          mv concourse-release/*.tgz concourse-release.tgz
          mv bpm-release/*.tgz bpm-release.tgz
          mv bbr-release/*.tgz bbr-release.tgz
          mv postgres-release/*.tgz postgres-release.tgz
          mv credhub-release/*.tgz credhub-release.tgz
          mv uaa-release/*.tgz uaa-release.tgz
          mv ubuntu-xenial-stemcell/*.tgz stemcell.tgz
          mv docs-platform-automation/docs/examples/engine/ops-files/<%= iaas %>.yml operations.yml
          mv docs-platform-automation/docs/examples/engine/test-pipeline.yml pipeline.yml

          # code_snippet engine-write-private-key start bash
          om interpolate \
            -c terraform-outputs.yml \
            --path /ops_manager_ssh_private_key > /tmp/private_key
          # code_snippet engine-write-private-key end bash

          export CONCOURSE_URL=$(cat vars/concourse-url.txt)

          # code_snippet engine-terraform-ops-manager-url start bash
          export OM_TARGET=$(om interpolate -c terraform-outputs.yml --path /ops_manager_dns)
          # code_snippet engine-terraform-ops-manager-url end bash

          OM_USERNAME=$(om interpolate -c env.yml --path /username)
          OM_PASSWORD=$(om interpolate -c env.yml --path /password)
          OM_DECRYPTION_PASSPHRASE=$(om interpolate -c env.yml --path /decryption-passphrase)

          # code_snippet engine-configure-auth start bash
          om --env env.yml configure-authentication \
             --username ${OM_USERNAME} \
             --password ${OM_PASSWORD} \
             --decryption-passphrase ${OM_DECRYPTION_PASSPHRASE}
          # code_snippet engine-configure-auth end bash

          # code_snippet engine-apply-changes start bash
          om --env env.yml configure-director \
             --config director-config.yml \
             --vars-file terraform-outputs.yml

          om --env env.yml apply-changes \
             --skip-deploy-products
          # code_snippet engine-apply-changes end bash


          # code_snippet engine-bosh-target start bash
          eval "$(om --env env.yml bosh-env --ssh-private-key=/tmp/private_key)"

          # Will return a non-error if properly targeted
          bosh curl /info
          # code_snippet engine-bosh-target end bash

          # code_snippet engine-upload-releases start bash
          # upload releases
          bosh upload-release concourse*.tgz
          bosh upload-release bpm*.tgz
          bosh upload-release postgres*.tgz
          bosh upload-release uaa*.tgz
          bosh upload-release credhub*.tgz
          bosh upload-release bbr*.tgz
          # code_snippet engine-upload-releases end bash

          # code_snippet engine-upload-stemcell start bash
          bosh upload-stemcell stemcell.tgz
          # code_snippet engine-upload-stemcell end bash


          cat docs-platform-automation/docs/examples/engine/vars/<%= iaas %>.yml | envsubst > vars.yml

          # code_snippet create-user start bash
          export ADMIN_USERNAME=admin
          export ADMIN_PASSWORD=password

          credhub set \
             -n /p-bosh/concourse/local_user \
             -t user \
             -z "${ADMIN_USERNAME}" \
             -w "${ADMIN_PASSWORD}"
          # code_snippet create-user end bash

          # code_snippet engine-deploy-concourse start bash
          bosh -n -d concourse deploy concourse-bosh-deployment/cluster/concourse.yml \
            -o concourse-bosh-deployment/cluster/operations/privileged-http.yml \
            -o concourse-bosh-deployment/cluster/operations/privileged-https.yml \
            -o concourse-bosh-deployment/cluster/operations/enable-lets-encrypt.yml \
            -o concourse-bosh-deployment/cluster/operations/basic-auth.yml \
            -o concourse-bosh-deployment/cluster/operations/tls-vars.yml \
            -o concourse-bosh-deployment/cluster/operations/uaa.yml \
            -o concourse-bosh-deployment/cluster/operations/credhub-colocated.yml \
            -o concourse-bosh-deployment/cluster/operations/offline-releases.yml \
            -o concourse-bosh-deployment/cluster/operations/backup-atc-colocated-web.yml \
            -o concourse-bosh-deployment/cluster/operations/secure-internal-postgres.yml \
            -o concourse-bosh-deployment/cluster/operations/secure-internal-postgres-bbr.yml \
            -o concourse-bosh-deployment/cluster/operations/secure-internal-postgres-uaa.yml \
            -o concourse-bosh-deployment/cluster/operations/secure-internal-postgres-credhub.yml \
            -o operations.yml \
            -l <(om interpolate --config vars.yml --vars-file terraform-outputs.yml) \
            -l concourse-bosh-deployment/versions.yml
          # code_snippet engine-deploy-concourse end bash

          # code_snippet engine-credhub-credentials start bash
          export CONCOURSE_CREDHUB_SECRET=$(credhub get -n /p-bosh/concourse/credhub_admin_secret -q)
          export CONCOURSE_CREDHUB_CA_CERT=$(credhub get -n /p-bosh/concourse/atc_tls -k ca)
          # code_snippet engine-credhub-credentials end bash

          # code_snippet engine-credhub-unset start bash
          unset CREDHUB_SECRET CREDHUB_CLIENT CREDHUB_SERVER CREDHUB_PROXY CREDHUB_CA_CERT
          # code_snippet engine-credhub-unset end bash

          # code_snippet engine-credhub-login start bash
          credhub login \
            --server "https://${CONCOURSE_URL}:8844" \
            --client-name=credhub_admin \
            --client-secret="${CONCOURSE_CREDHUB_SECRET}" \
            --ca-cert "${CONCOURSE_CREDHUB_CA_CERT}"
          # code_snippet engine-credhub-login end bash

          # code_snippet engine-credhub-add-value start bash
          credhub set \
            -n /concourse/main/test-pipeline/provided-by-credhub \
            -t value \
            -v "World"
          # code_snippet engine-credhub-add-value end bash

          PLATFORM=linux
          # code_snippet engine-fly-download start bash
          curl "https://${CONCOURSE_URL}/api/v1/cli?arch=amd64&platform=${PLATFORM}" --output fly
          chmod +x fly
          # code_snippet engine-fly-download end bash

          # code_snippet engine-fly-login start bash
          ./fly -t ci login \
            -c "https://${CONCOURSE_URL}" \
            -u "${ADMIN_USERNAME}" \
            -p "${ADMIN_PASSWORD}"
          # code_snippet engine-fly-login end bash

          # code_snippet engine-fly-set-pipeline start bash
          ./fly -t ci set-pipeline \
            -n \
            -p test-pipeline \
            -c pipeline.yml \
            --check-creds
          # code_snippet engine-fly-set-pipeline end bash

          # code_snippet engine-fly-unpause-run start bash
          ./fly -t ci unpause-pipeline -p test-pipeline

          ./fly -t ci trigger-job -j test-pipeline/test-job --watch
          # code_snippet engine-fly-unpause-run end bash

          output=$(./fly -t ci trigger-job -j test-pipeline/test-job --watch)
          if [[ $output == *"Hello, World"* ]]; then
            exit 0
          fi

          echo "Did not find expected output of 'Hello, World'. Instead saw:"
          echo "${output}"
          exit 1
- name: ☢delete-<%= iaas %>☢
  serial_groups: [ install-<%= iaas %> ]
  serial: true
  plan:
  - in_parallel:
    - get: deployments
    - get: ci
    - get: platform-automation-image
      params:
        unpack: true
    - get: docs-platform-automation
    - get: lock
      passed: [ deploy-and-test-<%= iaas %> ]
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: paving
  - *generate-config
  - try:
      task: delete-deployment
      image: platform-automation-image
      file: ci/platform-automation-engine/delete-deployment/task.yml
      params:
        IAAS: <%= iaas %>
        OM_TARGET: opsmanager.engine-<%= iaas %>.<%= iaas %>.platform-automation.cf-app.com
  - try:
      task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      params:
        OM_TARGET: opsmanager.engine-<%= iaas %>.<%= iaas %>.platform-automation.cf-app.com
  - try:
      task: delete-opsman-vm
      file: platform-automation-tasks/tasks/delete-vm.yml
      image: platform-automation-image
      ensure:
        do:
        - task: state-file
          file: platform-automation-tasks/tasks/make-git-commit.yml
          image: platform-automation-image
          params:
            GIT_AUTHOR_NAME: norm-ci
            GIT_AUTHOR_EMAIL: pcf-norm@pivotal.io
            COMMIT_MESSAGE: "delete-vm update state file for engine-<%= iaas %>"
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: engine-<%= iaas %>/state.yml
          input_mapping:
            repository: deployments
            file-source: generated-state
        - put: deployments
          params:
            rebase: true
            repository: repository-commit
  - try:
      task: delete-terraform
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: hashicorp/terraform
            tag: full
        inputs:
        - name: paving
        - name: deployments
        - name: docs-platform-automation
        outputs:
        - name: deployments
        params:
          DEPLOYMENT: engine-<%= iaas %>
          IAAS: <%= iaas %>
        run:
          path: bash
          args:
          - -c
          - |
            set -eux

            terraform_path=$PWD/paving-$IAAS
            deployment_path=$PWD/deployments/$DEPLOYMENT

            commit() {
              cp $terraform_path/terraform.tfstate $deployment_path
              pushd $deployment_path
                git config --global user.name "platform-automation-ci"
                git config --global user.email "pcf-platform-automation@pivotal.io"
                git add terraform.tfstate

                git commit -m "deleted infrastructure for $IAAS" || true
              popd
            }

            trap commit EXIT

            cp -ra paving/$IAAS paving-$IAAS
            cp docs-platform-automation/docs/examples/engine/terraform-templates/<%= iaas %>.tf $terraform_path
            cp $deployment_path/terraform.tfstate $terraform_path
            cp $deployment_path/terraform.tfvars $terraform_path

            cp -ra paving/$IAAS paving-$IAAS
            pushd paving-$IAAS
              terraform init
              terraform destroy \
                -auto-approve \
                -var-file=terraform.tfvars \
                -state=terraform.tfstate
            popd
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments
  # leftovers is purely a CI tool
  # it is not officially supported by Pivotal
  - task: leftovers
    attempts: 5
    file: ci/tasks/leftovers.yml
    params:
      BBL_IAAS: <%= iaas %>
      BBL_AWS_ACCESS_KEY_ID: ((s3.access_key_id))
      BBL_AWS_SECRET_ACCESS_KEY: ((s3.secret_access_key))
      BBL_AWS_REGION: us-east-2
      BBL_AZURE_CLIENT_ID: ((azure.client_id))
      BBL_AZURE_CLIENT_SECRET: ((azure.client_secret))
      BBL_AZURE_TENANT_ID: ((azure.tenant_id))
      BBL_AZURE_SUBSCRIPTION_ID: ((azure.subscription_id))
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((gcp.service_account))
      FILTER: engine-<%= iaas %>
      DRY_RUN: false
      NO_CONFIRM: true
  - task: remove state files
    file: ci/tasks/delete-state-file.yml
    params:
      DEPLOYMENT: engine-<%= iaas %>
    ensure:
      put: deployments
      params:
        rebase: true
        repository: deployments
<% end %>