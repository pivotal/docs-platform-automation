# Writing a pipeline to install Tanzu Operations Manager

This how-to-guide shows you how to write a pipeline for installing a new VMware Tanzu Operations Manager.
If you already have a Tanzu Operations Manager VM, see [Upgrading an existing Tanzu Operations Manager](./upgrade-existing-opsman.md).

<%= partial "getting-started" %>

## Downloading Tanzu Operations Manager

1. First, switch out the test job
for one that downloads and installs Tanzu Operations Manager.
Do this by changing:

   - the `name` of the job
   - the `name` of the task
   - the `file` of the task

    The first task in the job should be [`download-product`](../tasks.md#download-product).
    It has an additional required input;
    the `config` file `download-product` uses to talk to Tanzu Network.

1. Before writing that file and making it available as a resource,
`get` it (and reference it in the params)
as if it's there.

    It also has an additional output (the downloaded image).
    It will be used in a subsequent step,
    so you don't have to `put` it anywhere.

1. Finally, while it's fine for `test` to run in parallel,
the install process shouldn't, so
you also need to add `serial: true` to the job.

    ```yaml hl_lines="2 3 15-20"
    jobs:
    - name: install-ops-manager
      serial: true
      plan:
        - get: platform-automation-image
          resource: platform-automation
          params:
            globs: ["*image*.tgz"]
            unpack: true
        - get: platform-automation-tasks
          resource: platform-automation
          params:
            globs: ["*tasks*.zip"]
            unpack: true
        - get: config
        - task: download-product
          image: platform-automation-image
          file: platform-automation-tasks/tasks/download-product.yml
          params:
            CONFIG_FILE: download-ops-manager.yml
    ```

      1. If you try to `fly` this up to Concourse,
      it will again throw errors about resources that don't exist,
      so the next step is to make them.
      The first new resource you need is the config file.
      2. Push your git repo to a remote on GitHub
      to make this (and later, other) configuration available to the pipelines.
      GitHub has good [instructions](https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github)
      you can follow to create a new repository on GitHub.
      You can skip over the part
      about using `git init` to set up your repo,
      since you did that earlier.

1. Now set up your remote
and use `git push` to make it available.
You will use this repository to hold our single foundation specific configuration.
These instructions use the ["Single repository for each Foundation"](../pipeline-design/configuration-management-strategies.md#single-foundation-pattern)
pattern to structure the configurations.

1. You must add the repository URL to CredHub so that you can reference it
later when you declare the corresponding resource.

    ```bash
    # note the starting space throughout
    credhub set \
            -n /concourse/your_team_name/foundation/pipeline-repo \
            -t value -v git@github.com:username/your-repo-name
    ```

    `download-ops-manager.yml` holds creds for communicating with Tanzu Network,
    and uniquely identifies a Tanzu Operations Manager image to download.

    An example `download-ops-manager.yml` is shown below.

1. Create a `download-ops-manager.yml` for the IaaS you are using.

    <%= partial "opsman-config-tabs" %>

1. Add and commit the new file:

    ```bash
    git add download-ops-manager.yml
    git commit -m "Add download-ops-manager file for foundation"
    git push
    ```

    Now that the download-ops-manager file you need is in git,
    you need to add a resource to tell Concourse how to get it as `config`.

1. Since this is (probably) a private repo,
you need to create a deploy key Concourse can use to access it.
Follow the [GitHub instructions](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys)
for creating a deploy key.

2. Then, put the private key in CredHub so you can use it in your pipeline:

    ```bash
    # note the space at the beginning of the next line
    credhub set \
            --name /concourse/your-team-name/plat-auto-pipes-deploy-key \
            --type ssh \
            --private the/filepath/of/the/key-id_rsa \
            --public the/filepath/of/the/key-id_rsa.pub
    ```

1. Add this to the resources section of your pipeline file:

    ```yaml
    - name: config
      type: git
      source:
        uri: ((pipeline-repo))
        private_key: ((plat-auto-pipes-deploy-key.private_key))
        branch: main
    ```

1. Now place the Tanzu Network token in CredHub:

    ```bash
    # note the starting space throughout
    credhub set \
        -n /concourse/your_team_name/foundation/pivnet_token \
        -t value -v your-pivnet-token
    ```

    <%= partial include './paths-and-pipeline-names' %>

1. To perform interpolation in one of your input files,
use the [`prepare-tasks-with-secrets` task](../tasks.md#prepare-tasks-with-secrets).
In earlier steps, you relied on Concourse's native integration with CredHub for interpolation.
That worked because you needed to use the variable
in the pipeline itself, not in one of our inputs.

    You can add it to your job
    after you have retrieved the `download-ops-manager.yml` input,
    but before the `download-product` task:

    ```yaml hl_lines="16-24"
    jobs:
    - name: install-ops-manager
      serial: true
      plan:
        - get: platform-automation-image
          resource: platform-automation
          params:
            globs: ["*image*.tgz"]
            unpack: true
        - get: platform-automation-tasks
          resource: platform-automation
          params:
            globs: ["*tasks*.zip"]
            unpack: true
        - get: config
        - task: prepare-tasks-with-secrets
          image: platform-automation-image
          file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
          input_mapping:
            tasks: platform-automation-tasks
          output_mapping:
            tasks: platform-automation-tasks
          params:
            CONFIG_PATHS: config
        - task: download-product        
          image: platform-automation-image
          file: platform-automation-tasks/tasks/download-product.yml
          params:
            CONFIG_FILE: download-ops-manager.yml
    ```

    Notice the [input mappings](https://concourse-ci.org/jobs.html#schema.step.task-step.input_mapping)
    of the `prepare-tasks-with-secrets` task.
    This allows us to use the output of one task
    as in input of another.

    An alternative to `input_mappings` is discussed in
    [Configuration Management Strategies](../pipeline-design/configuration-management-strategies.md#advanced-pipeline-design).

1. Now, the `prepare-tasks-with-secrets` task
will find required credentials in the config files,
and modify the tasks,
so they will pull values from Concourse's integration of CredHub.

    The job will download the product now.
    This is a good commit point.

    ```bash
    git add pipeline.yml
    git commit -m 'download the Ops Manager image'
    git push
    ```

## Creating resources for your Tanzu Operations Manager

Before Platform Automation Toolkit can create a VM for your Tanzu Operations Manager installation,
there are certain resources required by the VM creation and Tanzu Operations Manager director installation processes.
These resources are created directly on the IaaS of your choice,
and read in as configuration for your Tanzu Operations Manager.

There are two main ways of creating these resources.
Use the method that is right for you and your setup.

### Terraform

These are open source terraforming files
recommended for use because they are maintained by VMware.
These files are found in the open source [`paving`](https://github.com/pivotal/paving) repo on GitHub.

What follows is the recommended way to get these resources set up.
The output can be used directly in subsequent steps as property configuration.

The `paving` repo provides instructions for use in the `README` file.
Any manual variables that you need to fill out
are located in a [terraform.tfvars](https://developer.hashicorp.com/terraform/language/values/variables) file,
in the folder for the IaaS you are using. For more specific instructions, see the `README` for that IaaS.

If there are specific aspects of the `paving` repo that does not work for you,
you can override some of the properties using an [override.tf](https://developer.hashicorp.com/terraform/language/files/override) file.

Follow these steps to use the `paving` repository:

1. Clone the repo on the command line:

    ```bash
    cd ../
    git clone https://github.com/pivotal/paving.git
    ```

2. In the checked out repository there are directories for each IaaS.
   Copy the terraform templates for the infrastructure of your choice
   to a new directory outside of the paving repo, so you can modify it:

    ```bash
    # cp -Ra paving/${IAAS} paving-${IAAS}
    mkdir paving-${IAAS}
    cp -a paving/$IAAS/. paving-$IAAS
    cd paving-${IAAS} 
    ```

    `IAAS` must be set to match one of the infrastructure directories
    at the top level of the `paving` repo; for example,
    `aws`, `azure`, `gcp`, or `nsxt`.

3. In the new directory, the `terraform.tfvars.example` file
   shows what values are required for that IaaS.
   Remove the `.example` from the filename,
   and replace the examples with real values.

4. Initialize Terraform which will download the required IaaS providers.

    ```bash
    terraform init
    ```

5. Run `terraform refresh` to update the state with what currently exists on the IaaS.

    ```bash
    terraform refresh \
      -var-file=terraform.tfvars
    ```

6. Next, you can run `terraform plan`
   to see what changes will be made to the infrastructure on the IaaS.

    ```bash
    terraform plan \
      -out=terraform.tfplan \
      -var-file=terraform.tfvars
    ```

7. Finally, you can run `terraform apply`
   to create the required infrastructure on the IaaS.

    ```bash
    terraform apply \
      -parallelism=5 \
      terraform.tfplan 
    ```

8. Save the output from `terraform output stable_config`
   into a `vars.yml` file in `your-repo-name` for future use:

    ```bash
    terraform output stable_config > ../your-repo-name/vars.yml
    ```

9. Return to your working directory for the post-terraform steps:

    ```bash
    cd ../your-repo-name
    ```

10. Commit and push the updated `vars.yml` file:

    ```bash
    git add vars.yml
    git commit -m "Update vars.yml with terraform output"
    git push
    ```

### Manual installation

VMware has extensive documentation to manually create the resources needed
if you are unable or do not wish to use Terraform.
As with the Terraform solution, however,
there are different docs depending on the IaaS
you are installing Tanzu Operations Manager onto.

When going through the documentation required for your IaaS,
be sure to stop before deploying the Tanzu Operations Manager image.
Platform Automation Toolkit will do this for you.

- [AWS](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-aws.html)
- [Azure](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-azure.html)
- [GCP](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-gcp.html)
- [OpenStack](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-openstack.html)
- [vSphere](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-vsphere.html)

<p class="note">
<span class="note__title">Note</span>
If you need to install an earlier version of Tanzu Operations Manager,
select your desired version from the version selector at the top of the page.</p>

## Creating the Tanzu Operations Manager VM

1. Now that you have a Tanzu Operations Manager image and the resources required to deploy a VM,
you can add the new task to the `install-opsman` job.

    ```yaml hl_lines="29-31"
    jobs:
    - name: install-ops-manager
      serial: true
      plan:
        - get: platform-automation-image
          resource: platform-automation
          params:
            globs: ["*image*.tgz"]
            unpack: true
        - get: platform-automation-tasks
          resource: platform-automation
          params:
            globs: ["*tasks*.zip"]
            unpack: true
        - get: config
        - task: prepare-tasks-with-secrets
          file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
          input_mapping:
            tasks: platform-automation-tasks
          output_mapping:
            tasks: platform-automation-tasks
          params:
            CONFIG_PATHS: config
        - task: download-product        
          image: platform-automation-image
          file: platform-automation-tasks/tasks/download-product.yml
          params:
            CONFIG_FILE: download-ops-manager.yml
        - task: create-vm
          image: platform-automation-image
          file: platform-automation-tasks/tasks/create-vm.yml
    ```

1. If you try to `fly` this up to Concourse, it will again complain
about resources that don't exist, so it's time to make them.
Two new inputs need to be added for `create-vm`:

    * `config`
    * `state`

    The optional inputs are vars used with the config, so you will add those when you do the `config`.

   1. For the config file, write a Tanzu Operations Manager VM Configuration file to `opsman.yml`.

    The properties available vary by IaaS, for example:

    * IaaS credentials
    * networking setup (IP address, subnet, security group, etc)
    * SSH key
    * datacenter/availability zone/region

    Continue with the next section for completing the `opsman.yml` file.

### Terraform outputs

If you used the `paving` repository from the [Creating resources for your Tanzu Operations Manager](./installing-opsman.html#creating-resources-for-your-tanzu-operations-manager) section,
the following steps will result in a filled out `opsman.yml`.

Tanzu Operations Manager must be deployed with the IaaS-specific configuration.

1. Copy and paste the relevant YAML below for your IaaS,
    and save the file as `opsman.yml`.

    **AWS**

      ```yaml
        --8<-- "external/paving/ci/configuration/aws/ops-manager.yml"
      ```

   **Azure**

      ```yaml
        --8<-- "external/paving/ci/configuration/azure/ops-manager.yml"
      ```

    **GCP**

      ```yaml
        --8<-- "external/paving/ci/configuration/gcp/ops-manager.yml"
      ```

    **vSphere+NSXT**

      ```yaml
        --8<-- "external/paving/ci/configuration/nsxt/ops-manager.yml"
      ```

     Where:

     * The `((parameters))` in these examples map to outputs from the `terraform-outputs.yml`,
       which can be provided via vars file for YAML interpolation in a subsequent step.

<p class="note">
<span class="note__title">Note</span>
For a supported IaaS not listed above,
see the <a href="../inputs-outputs.html#ops-manager-config">Operations Manager config</a>.
</p>

### Manual configuration

If you created your infrastructure manually
or would like additional configuration options,
these are the acceptable keys for the `opsman.yml` file for each IaaS.

    **AWS**

    <%= partial "../examples/opsman-config/aws" %>

    **Azure**

    <%= partial "../examples/opsman-config/azure" %>

    **GCP**

    <%= partial "../examples/opsman-config/gcp" %>

    **OpenStack**

    <%= partial "../examples/opsman-config/openstack" %>

    **vSphere**

    <%= partial "../examples/opsman-config/vsphere" %>

### Using the Tanzu Operations Manager config file

1. After you have your config file, commit and push it:

    ```bash
    git add opsman.yml
    git commit -m "Add opsman config"
    git push
    ```

    The `state` input is a placeholder
    which will be filled in by the `create-vm` task output.
    This will be used later to keep track of the VM so it can be upgraded,
    which you can learn about in the [upgrade-how-to](./upgrade-existing-opsman.md).

1. Add the following to your `resources` section of your `pipeline.yml`.

    ```yaml
    - name: vars
      type: git
      source:
        uri: ((pipeline-repo))
        private_key: ((plat-auto-pipes-deploy-key.private_key))
        branch: main
    ```

    This resource definition will allow `create-vm`
    to use the variables from `vars.yml`
    in the `opsman.yml` file.

1. Update the `create-vm` task in the `install-opsman` to
use the `download-product` image,
Tanzu Operations Manager configuration file, the
variables file,
and the placeholder state file.

    ```yaml hl_lines="33-37"
    jobs:
    - name: install-ops-manager
      serial: true
      plan:
        - get: platform-automation-image
          resource: platform-automation
          params:
            globs: ["*image*.tgz"]
            unpack: true
        - get: platform-automation-tasks
          resource: platform-automation
          params:
            globs: ["*tasks*.zip"]
            unpack: true
        - get: config
        - get: vars
        - task: prepare-tasks-with-secrets
          file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
          input_mapping:
            tasks: platform-automation-tasks
          output_mapping:
            tasks: platform-automation-tasks
          params:
            CONFIG_PATHS: config
        - task: download-product        
          image: platform-automation-image
          file: platform-automation-tasks/tasks/download-product.yml
          params:
            CONFIG_FILE: download-ops-manager.yml
        - task: create-vm
          image: platform-automation-image
          file: platform-automation-tasks/tasks/create-vm.yml
          params:
            VARS_FILES: vars/vars.yml
          input_mapping:
            state: config
            image: downloaded-product
    ```

    <p class="note">
    <span class="note__title">Note</span>
    <strong>Defaults for tasks:</strong>
    We do not explicitly set the default parameters
    for <code>create-vm</code> in this example.
    Because <code>opsman.yml</code> is the default input to
    <code>OPSMAN_CONFIG_FILE</code>, it is redundant
    to set this param in the pipeline.
    See the <a href="../tasks.md">Task reference</a>
    available and default parameters.</p>

1. Now set the pipeline.

    Before you run the job,
    [`ensure`](https://concourse-ci.org/jobs.html#schema.step.ensure) that `state.yml` is always persisted
    regardless of whether the `install-opsman` job failed or passed.
    To do this, you can add the following section to the job:

    ```yaml hl_lines="37-56"
    jobs:
    - name: install-ops-manager
      serial: true
      plan:
        - get: platform-automation-image
          resource: platform-automation
          params:
            globs: ["*image*.tgz"]
            unpack: true
        - get: platform-automation-tasks
          resource: platform-automation
          params:
            globs: ["*tasks*.zip"]
            unpack: true
        - get: config
        - task: prepare-tasks-with-secrets
          file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
          input_mapping:
            tasks: platform-automation-tasks
          output_mapping:
            tasks: platform-automation-tasks
          params:
            CONFIG_PATHS: config
        - task: download-product        
          image: platform-automation-image
          file: platform-automation-tasks/tasks/download-product.yml
          params:
            CONFIG_FILE: download-ops-manager.yml
        - task: create-vm
          image: platform-automation-image
          file: platform-automation-tasks/tasks/create-vm.yml
          params:
            VARS_FILES: vars/vars.yml
          input_mapping:
            state: config
            image: downloaded-product
          ensure:
            do:
              - task: make-commit
                image: platform-automation-image
                file: platform-automation-tasks/tasks/make-git-commit.yml
                input_mapping:
                  repository: config
                  file-source: generated-state
                output_mapping:
                  repository-commit: config-commit
                params:
                  FILE_SOURCE_PATH: state.yml
                  FILE_DESTINATION_PATH: state.yml
                  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                  GIT_AUTHOR_NAME: "Platform Automation Toolkit Bot"
                  COMMIT_MESSAGE: 'Update state file'
              - put: config
                params:
                  repository: config-commit
                  merge: true
    ```

1. Set the pipeline one final time,
run the job, and see it pass.

    ```bash
    fly -t control-plane set-pipeline \
        -p foundation \
        -c pipeline.yml
    ```

1. Commit the final changes to your repository.

    ```bash
    git add pipeline.yml
    git commit -m "Install Ops Manager in CI"
    git push
    ```

Your install pipeline is now complete.
