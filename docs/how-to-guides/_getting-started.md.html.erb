## Prerequisites

Over the course of this guide,
we're going to use Platform Automation Toolkit
to create a [pipeline](https://concourse-ci.org/pipelines.html)
using [Concourse](https://concourse-ci.org/).

You need:

{% if upgradeHowTo %}
1. A running Tanzu Operations Manager VM that you would like to upgrade
{% endif %}
1. Credentials for an IaaS that Tanzu Operations Manager is compatible with
    - It doesn't matter what IaaS you use for Tanzu Operations Manager,
    as long as your Concourse can connect to it.
    Pipelines built with Platform Automation Toolkit can be platform-agnostic.
2. A Concourse instance
   with access to a CredHub instance
   and to the Internet
3. GitHub account
4. Read/write credentials and bucket name for an S3 bucket
5. An account on [VMware Tanzu Network](https://network.pivotal.io/)
6. A MacOS workstation
    - with Docker installed
    - a text editor you like
    - a terminal emulator you like
    - a browser that works with Concourse,
      like Firefox or Chrome
    - and `git`

It will be very helpful to have a basic familiarity with the following. If you don't have basic familiarity with all these things,
we'll explain some basics, and link to resources to learn more:

- the bash terminal
- [git](https://git-scm.com/)
- [YAML](https://learnxinyminutes.com/docs/yaml/)
- [Concourse](https://concourse-ci.org/)

<p class="note">
<span class="note__title">Note</span>
While this guide uses GitHub to provide a git remote,
and an S3 bucket as a blobstore,
Platform Automation Toolkit supports arbitrary git providers
and S3-compatible blobstores.
If you need to use an alternate one, that's okay.
<br>
We picked specific examples
so we could describe some steps in detail.
Some details may be different
if you follow along with different providers.
If you're comfortable navigating those differences on your own,
go for it!
See <a href="../how-to-guides/setting-up-s3.md">Setting up S3 for file storage</a>.
<br>
Similarly, in this guide, we assume the MacOS operating system.
This should all work fine on Linux, too,
but there might be differences in the paths you'll need to figure out.</p>

## Creating a Concourse pipeline

Platform Automation Toolkit's tasks and image are meant to be used in a Concourse pipeline.
So, let's make one.

Using your bash command-line client,
create a directory to keep your pipeline files in, and `cd` into it.

```bash
mkdir your-repo-name
cd !$
```

This repo name should relate to your situation
and be specific enough to be navigable from your local workstation.

<p class="note important">
<span class="note__title">Important</span>
<code>!$</code> is a bash shortcut.
Pronounced "bang, dollar-sign,"
it means "use the last argument from the most recent command."
In this case, that's the directory we just created.</p>

{% if upgradeHowTo %}

Before getting started with the pipeline itself,
gather some variables in a file
you can use throughout our pipeline.

Open your text editor and create `vars.yml`.
Here's what it should look like to start, we can add things to this as we go:

```yaml
platform-automation-bucket: your-bucket-name
credhub-server: https://your-credhub.example.com
opsman-url: https://pcf.foundation.example.com
```

<p class="note">
<span class="note__title">Note</span>
This example assumes that you're using DNS and hostnames.
You can use IP addresses for all these resources instead,
but you still need to provide the information as a URL,
for example: <code>https://120.121.123.124</code>.</p>

{% endif %}

Now, create a file called `pipeline.yml`.

<p class="note">
<span class="note__title">Note</span>
<code>pipeline.yml</code> is used in the examples throughout this guide.
However, you may create multiple pipelines over time.
If there's a more sensible name for the pipeline you're working on,
feel free to use that instead.</p>

Write this at the top, and save the file. This is [YAML](https://learnxinyminutes.com/docs/yaml/) for "the start of the document." It's optional, but traditional:

```yaml

---
```

Now you have a valid YAML pipeline file.

### <a></a> Getting `fly`

Let's try to set it as a pipeline with [`fly`][concourse-fly],
the Concourse command-line Interface (CLI).

First, check if we've got `fly` installed at all:

```bash
fly -v
```

If it gives you back a version number, great!
Skip ahead to [Setting the pipeline](#setting-the-pipeline)

If it says something like `-bash: fly: command not found`,
we have a little work to do: we've got to get `fly`.

Navigate to the address for your Concourse instance in a web browser.
At this point, you don't even need to be signed in!
If there are no public pipelines, you should see something like this:

![alt-text="Get Fly"](../img/concourse-fly-download.png)

If there _are_ public pipelines,
or if you're signed in and there are pipelines you can see,
you'll see something similar in the lower-right hand corner.

Click the icon for your OS and save the file,
`mv` the resulting file to somewhere in your `$PATH`,
and use `chmod` to make it executable:

<p class="note">
<span class="note__title">Note</span>
<b>About command-line examples:</b>
Some of these, you can copy-paste directly into your terminal.
Some of them won't work that way,
or even if they did, would require you to edit them to replace our example values
with your actual values.
We recommend you type all of the bash examples in by hand,
substituting values, if necessary, as you go.
Don't forget that you can often hit the tab key
to auto-complete the name of files that already exist;
it makes all that typing just a little easier,
and serves as a sort of command-line autocorrect.</p>

```bash
mv ~/Downloads/fly /usr/local/bin/fly
chmod +x !$
```

Congrats! You got `fly`.

This means that you downloaded the `fly` binary,
and moved it into the bash PATH,
which is where bash looks for things to execute
when you type a command.
Then you added permissions that allow it to be e`x`ecuted.
Now, the CLI is installed
and you won't have to do it again,
because `fly` has the ability to update itself,
(which will be described more later).

### <a></a> Setting the pipeline

Okay _now_ let's try to set our pipeline with `fly`, the Concourse CLI.

`fly` keeps a list of Concourses it knows how to talk to.
Let's see if the Concourse we want is already on the list:

```bash
fly targets
```

If you see the address of the Concourse you want to use in the list,
note down its name, and use it in the login command:

```bash
fly -t control-plane login
```

<p class="note">
<span class="note__title">Note</span>
This guide uses the name <code>control-plane</code>
for the Concourse in this guide.
It's not a special name,
it just happens to be the name
of the Concourse we want to use in our target list.</p>

If you don't see the Concourse you need, you can add it with the `-c` (`--concourse-url`)flag:

```bash
fly -t control-plane login -c https://your-concourse.example.com
```

You should see a login link you can click on
to complete login from your browser.

<p class="note important">
<span class="note__title">Important</span>
The <code>-t</code> flag sets the name when used with <code>login</code> and <code>-c</code>.
In the future, you can leave out the <code>-c</code> argument.
<br>
If you ever want to know what a short flag stands for,
you can run the command with <code>-h</code> (<code>--help</code>) at the end.</p>

Time to set the pipeline.
We'll use the name "foundation" for this pipeline,
but if your foundation has an actual name, use that instead.

```bash
fly -t control-plane set-pipeline -p foundation -c pipeline.yml
```

It should say `no changes to apply`,
which is expected, since we gave it an empty YAML doc.

<p class="note">
<span class="note__title">Note</span>
If <code>fly</code> says something about a "version discrepancy,"
"significant" or otherwise, run <code>fly sync</code> and try again.
<code>fly sync</code> automatically updates the CLI
with the version that matches the Concourse you're targeting.</p>

### <a></a> Your first job

First, add this to your `pipeline.yml`, starting on the line after the `---`:

```yaml
wait: no never mind let's get version control first
```

Good point. Don't actually add that to your pipeline config yet.
Or if you have, delete it, so your whole pipeline looks like this again:

```yaml

---
```

Reverting edits to our pipeline is something we'll probably want to do again.
This is one of many reasons we want to keep our pipeline under version control.

So let's make this directory a git repo!

#### <a></a> But first, `git init`
	
<p class="note important">
<span class="note__title">Important</span>
<b>Git Repository Layout:</b>
The following describes a step-by-step approach for how to get set up with git.
<br>
For an example of the repository file structure
for single and multiple foundation systems,
see <a href="./git-repo-layout.md">Why use Git and GitHub?</a></p>

`git` should come back with information about the commit you just created:

```bash
git init
git commit --allow-empty -m "Empty initial commit"
```

If it gives you a config error instead,
you might need to configure `git` a bit.
Here's a [good guide][git-first-time-setup]
to initial setup.
When that is done, and try again.

Now add your `pipeline.yml`,
so in the future it's easy to get back to that soothing `---` state.

```bash
git add pipeline.yml {% if upgradeHowTo %}vars.yml{% endif %}
git commit -m "Add pipeline{% if upgradeHowTo %} and starter vars{% endif %}"
```

Let's just make sure we're all tidy:

```bash
git status
```

`git` should come back with `nothing to commit, working tree clean`.

Great. Now we can safely make changes.

<p class="note important">
<span class="note__title">Important</span>
<code>git</code> commits are the basic unit of code history.
<br>
Making frequent, small, commits with good commit messages
makes it much easier to figure out why things are the way they are,
and to return to the way things were in simpler, better times.
Writing short commit messages that capture the intent of the change
really does make the pipeline history much more legible,
both to future-you,
and to current-and-future teammates and collaborators.</p>

#### <a></a> The test task

Platform Automation Toolkit comes with a [`test`](../tasks.md#test) task
meant to validate that it's been installed correctly.
Use it to get set up.

Add this to your `pipeline.yml`, starting on the line after the `---`:

```yaml
jobs:
- name: test
  plan:
    - task: test
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test.yml
```

If we try to set this now, Concourse will take it:

```bash
fly -t control-plane set-pipeline -p foundation -c pipeline.yml
```

Now we should be able to see our pipeline
in the Concourse UI.
It'll be paused, so click the "play" button to unpause it.
Then, click in to the gray box for our `test` job,
and hit the "plus" button to schedule a build.

It should error immediately, with `unknown artifact source: platform-automation-tasks`.
We didn't give it a source for our task file.

We've got a bit of pipeline code that Concourse accepts.
Before we start doing the next part,
this would be a good moment to make a commit:

```bash
git add pipeline.yml
git commit -m "Add (nonfunctional) test task"
```

With that done,
we can try to get the inputs we need
by adding `get` steps to the plan
before the task, like so:

```yaml  hl_lines="4-13"
jobs:
- name: test
  plan:
    - get: platform-automation-image
      resource: platform-automation
      params:
        globs: ["*image*.tgz"]
        unpack: true
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        globs: ["*tasks*.zip"]
        unpack: true
    - task: test
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test.yml
```

<p class="note">
<span class="note__title">Note</span>
<b>When using vSphere:</b>
There is a smaller vSphere container image available.
To use it instead of the general purpose image,
you can use this glob to get the image:
<br><br>
  <code>
    - get: platform-automation-image
      resource: platform-automation
      params:
        globs: ["vsphere-platform-automation-image*.tar.gz"]
        unpack: true
  </code>
</p>

If we try to `fly set` this,
`fly` will complain about invalid resources.

To actually make the `image` and `file` we want to use available,
we'll need some Resources.

#### <a></a> Adding resources

Resources are Concourse's main approach to managing artifacts.
We need an image, and the tasks directory -
so we'll tell Concourse how to get these things by declaring Resources for them.

In this case, we'll be downloading the image and the tasks directory from Tanzu Network.
Before we can declare the resources themselves,
we have to teach Concourse to talk to Tanzu Network.
(Many resource types are built in, but this one isn't.)

Add the following to your pipeline file.
We'll put it above the `jobs` entry.

```yaml
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))
```

The API token is a credential,
which we'll pass via the command-line when setting the pipeline,
so we don't accidentally check it in.

<p class="note important">
<span class="note__title">Important</span>
<b>Keep it secret, keep it safe:</b>
Bash commands that start with a space character
are not saved in your history.
This can be very useful for cases like this,
where you want to pass a secret,
but you don't want it saved.
Commands in this guide that contain a secret
start with a space, which can be easy to miss.</p>

Grab a refresh token from your Tanzu Network profile
(when logged in, click your user name, then **Edit Profile**)
and clicking **Request New Refresh Token**.
Then use that token in the following command:

```bash
# note the space before the command
 fly -t control-plane set-pipeline \
     -p foundation \
     -c pipeline.yml \
     -v pivnet-refresh-token=your-api-token
```

<p class="note caution">
<span class="note__title">Caution</span>
When you get your Tanzu Network token as described above,
any previous Tanzu Network tokens you have stop working.
If you're using your Tanzu Network refresh token anywhere,
retrieve it from your existing secret storage rather than getting a new one,
or you'll end up needing to update it everywhere it's used.</p>

Go back to the Concourse UI and trigger another build.
This time, it should pass.

Now it's time to commit.

```bash
git add pipeline.yml
git commit -m "Add resources needed for test task"
```

We'd rather not pass our Tanzu Network token
every time we need to set the pipeline.
Fortunately, Concourse can integrate
with secret storage services.

Let's put our API token in CredHub so Concourse can get it.

<p class="note">
<span class="note__title">Note</span>
<b>Backslashes in bash examples:</b>
The following example has been broken across multiple lines
by using backslash characters (<code>\</code>) to escape the newlines.
The backslash is used in here to keep the examples readable.
When you're typing these out,
you can skip the backslashes and put it all on one line.</p>

First we'll need to login:
Again, note the space at the start.

<%= partial "logging-into-credhub" %>

Then, we can set the credential name
to the path [where Concourse will look for it](https://concourse-ci.org/credhub-credential-manager.html#credential-lookup-rules):

```bash
# note the starting space
 credhub set \
         --name /concourse/your-team-name/pivnet-refresh-token \
         --type value \
         --value your-credhub-refresh-token
```

Now, let's set that pipeline again,
without passing a secret this time.

```bash
fly -t control-plane set-pipeline \
    -p foundation \
    -c pipeline.yml
```

This should succeed,
and the diff Concourse shows you should replace the literal credential
with `((pivnet-refresh-token))`.

Visit the UI again and re-run the test job;
this should also succeed.

[//]: # ({% with path="../" %})
[//]: # (    {% include ".internal_link_url.md" %})
[//]: # ({% endwith %})
[//]: # ({% include ".external_link_url.md" %})
