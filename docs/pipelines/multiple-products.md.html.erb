# VMware Tanzu Operations Manager and multiple products

Below you will find a reference pipeline that illustrates the tasks and provides an example of a basic pipeline design. You know your environment and constraints and we don't. VMware recommends that you look at the tasks that make up the pipeline, and see how they can be arranged for your specific automation needs. For a deeper dive into each task see the Task Reference.

These Concourse pipelines are examples of how to use the [tasks](../tasks.md). If you use a different CI/CD platform, you can use these Concourse files as examples of the inputs, outputs, and arguments used in each step in the workflow.

## Prerequisites

* Deployed Concourse

<p class="note">
<span class="note__title">Note</span>
Platform Automation Toolkit is based on Concourse CI.
We recommend that you have some familiarity with Concourse before getting started.
If you are new to Concourse, <a href="https://docs.vmware.com/en/Concourse-for-VMware-Tanzu/7.0/vmware-tanzu-concourse/GUID-installation-install-concourse-bosh.html">Concourse CI Tutorials</a> is a good place to start.</p>

* Persisted datastore that can be accessed by Concourse resource (e.g. s3, gcs, minio)
* A valid [Env file](../how-to-guides/configuring-env.md#generating-env-file): this file will contain credentials necessary to login to Tanzu Operations Manager using the `om` CLI.
It is used by every task within Platform Automation Toolkit
* A valid [Auth file](../how-to-guides/configuring-auth.md#auth-file): this file will contain the credentials necessary to create the Tanzu Operations Manager login the first time
the VM is created. The choices for this file are simple or saml authentication.

<p class="note">
<span class="note__title">Note</span>
There will be some crossover between the auth file and the env file due to how <code>om</code> is set up and how the system works. It is highly recommended to parameterize these values, and let a credential management system (such as CredHub) fill in these values for you in order to maintain consistency across files.</p>

* An [opsman-configuration](../inputs-outputs.md) file: This file is required to connect to an IAAS, and control the lifecycle management
 of the Tanzu Operations Manager VM
* A [director-configuration](../how-to-guides/creating-a-director-config-file.md) file: Each Tanzu Operations Manager needs its own configuration, but it is retrieved differently from
a product configuration. This config is used to deploy a new Tanzu Operations Manager director, or update an existing one.
* A set of valid [product-configuration](../how-to-guides/adding-a-product.md) files: Each product configuration is a yaml file that contains the properties
necessary to configure a Tanzu Operations Manager product using the `om` tool. This can be used during install or update.
* (Optional) A working [CredHub](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/5.0/tas-for-vms/credhub-index.html) setup with its own UAA client and secret.

<p class="note">
<span class="note__title">Note</span>
<b>Retrieving products from Tanzu Network:</b>
Ensure that products have been procured from Tanzu Network using the information in
<a href="../pipelines/resources.md">Retrieving external dependencies</a>.</p>

## Installing VMware Tanzu Operations Manager and multiple products

The pipeline shows how to compose the tasks
to install Tanzu Operations Manager and the Tanzu Application Service and Healthwatch products.
Its dependencies are coming from a trusted git repository,
which can be retrieved as shown in [Retrieving external dependencies](../pipelines/resources.md).

### Full pipeline and reference configurations

The [docs-platform-automation-reference-pipeline-config git repository](https://github.com/pivotal/docs-platform-automation-reference-pipeline-config)
contains the [full pipeline file](https://github.com/pivotal/docs-platform-automation-reference-pipeline-config/blob/develop/pipelines/pipeline.yml),
along with other pipeline and configuration examples.

This can be useful when you want to take
a fully assembled pipeline as a starting point;
the rest of this document covers the sections of the full pipeline in more detail.

## Pipeline components

### S3 resources

These can either be uploaded manually or from the [reference resources pipeline](../pipelines/resources.md) in *Retrieving external dependencies*.

---excerpt--- "reference/reference-resources-s3"

<p class="note important">
<span class="note__title">Important</span>
<b>Tanzu Application Service-Windows with S3:</b>
If you are retrieving <code>pas-windows</code> and <code>pas-windows-stemcell</code> from an S3 bucket,
you must use the built in S3 concourse resource.
This is done in the example above.
The <code>download-product</code> task with <code>SOURCE: s3</code> does not persist meta information
about necessary stemcell for <code>pas-windows</code>
because VMware does not distribute the Windows file system.</p>
    
Alternatively, products may be downloaded using the `download-product` task with
the param `SOURCE` set to `s3|azure|gcs`.
In a job, specify the following task:

```yaml
...
- task: download-pas
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-product.yml
  params:
    CONFIG_FILE: download-product-configs/pas.yml
    SOURCE: s3
  input_mapping:
    config: interpolated-creds
  output_mapping:
    downloaded-product: pas-product
    downloaded-stemcell: pas-stemcell
...
```

### Exported installation resource

<%= partial "./export_installation_note" %>

---excerpt--- "reference/export-installation-resource-usage"

### Configured resources

These contain values for
Tanzu Operations Manager VM creation, director, product, foundation-specific vars, auth, and env files.
For more details, see the [Inputs and outputs](../inputs-outputs.md) section.
Platform Automation Toolkit will not create these resources for you.

---excerpt--- "reference/resources-configurations"

### Trigger resources

---excerpt--- "reference/resources-triggers"

### Secrets Handling

This helps load secrets stored in an external credential manager such as CredHub.
Concourse support several [credential managers](https://concourse-ci.org/creds.html) natively.

The configuration below uses the [`prepare-tasks-with-secrets`](../tasks.md#prepare-tasks-with-secrets) task
to load secrets from your external configuration files.

---excerpt--- "reference/prepare-tasks-with-secrets-usage"

### Jobs

Each job corresponds to a "box"
on the visual representation of your Concourse pipeline.
These jobs consume resources defined above.

---excerpt--- "reference/reference-jobs"

[//]: # ({% with path="../" %})
[//]: # (    {% include ".internal_link_url.md" %})
[//]: # ({% endwith %})
[//]: # ({% include ".external_link_url.md" %})
