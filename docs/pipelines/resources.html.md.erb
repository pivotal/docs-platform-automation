Below you will find a reference pipeline that illustrates the tasks and provides an example of a basic pipeline design. You know your environment and constraints and we don't - we recommend you look at the tasks that make up the pipeline, and see how they can be arranged for your specific automation needs. For a deeper dive into each task see the Task Reference.

These Concourse pipelines are examples on how to use the [tasks](../tasks.html). If you use a different CI/CD platform, you can use these Concourse files as examples of the inputs, outputs, and arguments used in each step in the workflow.

## Prerequisites

* Deployed Concourse

    <p class="note">
    <span class="note__title">Note</span>
    Platform Automation Toolkit is based on Concourse CI.
    VMware recommends that you have some familiarity with Concourse before getting started.
    If you are new to Concourse, see the <a href="https://docs.vmware.com/en/Concourse-for-VMware-Tanzu/index.html">Concourse CI Tutorials</a>.</p>

* Persisted datastore that can be accessed by Concourse resource (e.g. s3, gcs, minio)
* A set of valid [download-product-config][download-product-config] files: Each product has a configuration YAML of what version to download from Tanzu Network.
* Tanzu Network access to [Platform Automation Toolkit][tanzu-network-platform-automation]

## Retrieval from Tanzu Network

The pipeline downloads dependencies consumed by the tasks
and places them into a trusted s3-like storage provider.
This helps other concourse deployments without internet access
retrieve task dependencies.

<p class="note">
<span class="note__title">Note</span>
<b>Blobstore filename prefixing</b>:
Note the unique regex format for blob names,
for example: <code>\[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal</code>.
Tanzu Network filenames will not always contain the necessary metadata
to accurately download files from a blobstore (that is, s3, gcs, azure).
So, the product slug and version are prepended when using <code>download-product</code>.
For more information on how this works,
and what to expect when using <code>download-product</code>,
see the <a href=../tasks.html#download-product>download-product task reference</a>.</p>

The pipeline requires configuration for the [download-product](../tasks.html#download-product) task.
Below are examples that can be used.

=== "Healthwatch"
     ---excerpt--- "reference/download-healthwatch-from-pivnet-usage"
=== "Ops Manager"
    ---excerpt--- "reference/download-ops-manager-from-pivnet-usage"
=== "PKS"
    ---excerpt--- "reference/download-pks-from-pivnet-usage"
=== "TAS"
    ---excerpt--- "reference/download-tas-from-pivnet-usage"


### Full Pipeline and Reference Configurations

There is a [git repository][ref-config-repo]
containing containing the [full pipeline file][ref-config-resource-pipeline],
along with other pipeline and configuration examples.

This can be useful when you want to take
a fully assembled pipeline as a starting point;
the rest of this document covers the sections of the full pipeline in more detail.

## Pipeline Components

### Resource Types

This custom resource type uses the [pivnet-resource][pivnet-resource]
to pull down and separate both pieces of the Platform Automation Toolkit product (tasks and image)
so they can be stored separately in S3.

---excerpt--- "reference/resources-pipeline-resource-types"

### Product Resources

S3 resources where Platform Automation Toolkit [`download-product`][download-product] outputs will be stored.
Each product/stemcell needs a separate resource defined.
Platform Automation Toolkit will not create these resources for you.

---excerpt--- "reference/resources-pipeline-products"

### Platform Automation Toolkit Resources

`platform-automation-pivnet` is downloaded directly from Tanzu Network
and will be used to download all other products from Tanzu Network.

`platform-automation-tasks` and `platform-automation-image` are S3 resources
that will be stored for internet-restricted, or faster, access.
Platform Automation Toolkit will not create this resource for you.

---excerpt--- "reference/resources-pipeline-platform-automation"

### Configured Resources

You will need to add your [`download-product` configuration][download-product-config] configuration files
to your configurations repo.
Platform Automation Toolkit will not create these resources for you.
For more details, see the [Inputs and Outputs][inputs-outputs] section.

---excerpt--- "reference/resources-pipeline-configurations"

### Trigger Resources

---excerpt--- "reference/resources-pipeline-triggers"

### Secrets Handling

This helps load secrets stored in an external credential manager -- such as CredHub.
Concourse supports several [credential managers][concourse-secrets-handling] natively.
 
The configuration below uses the [`prepare-tasks-with-secrets`][prepare-tasks-with-secrets] task
to load secrets from your external configuration files.

---excerpt--- "reference/resources-pipeline-prepare-tasks-with-secrets"

### Jobs

Each job corresponds to a "box" on the visual representation of your Concourse pipeline.
These jobs consume resources defined above.

---excerpt--- "reference/resources-pipeline-jobs"

{% with path="../" %}
    {% include ".internal_link_url.md" %}
{% endwith %}
{% include ".external_link_url.md" %}
