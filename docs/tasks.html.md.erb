# Task Reference

## Platform Automation Toolkit Tasks
This document lists each Platform Automation Toolkit task,
and provides information about their intentions, inputs, and outputs.

The tasks are presented, in their entirety,
as they are found in the product.

The docker image can be used to invoke the commands in each task locally.
Use `--help` for more information.
To learn more see the [running-commands-locally](./how-to-guides/running-commands-locally.html) section.

### apply-changes

Triggers an install on the Operations Manager described by the auth file.

To optionally provide an errand file to manually control errands
for a particular of run of `apply-changes`.
To see an example of this config file, see [Inputs and Outputs](./inputs-outputs.html).

<%= partial "disable-verifiers" %>

**Task**

<%= partial "tasks/apply-changes" %>

**Implementation**

<%= partial "tasks/apply-changes-script" %>

**Usage**

```yaml
- task: apply-product-changes
  attempts: 3
  image: platform-automation-image
  file: platform-automation-tasks/tasks/apply-changes.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### apply-director-changes
`apply-changes` can also be used to trigger an install for just the BOSH Director
with the `--skip-deploy-products`/`-sdp` flag.

<%= partial "disable-verifiers" %>

**Task**

<%= partial "tasks/apply-director-changes" %>

**Implementation**

<%= partial "tasks/apply-director-changes-script" %>

**Usage**

```yaml
- task: apply-director-changes
  image: platform-automation-image
  attempts: 3
  file: platform-automation-tasks/tasks/apply-director-changes.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### assign-multi-stemcell
`assign-multi-stemcell` assigns multiple stemcells to a provided product.
This feature is only available in OpsMan 2.6+.
For more information on how to utilize this workflow,
see [Stemcell Handling](./concepts/stemcell-handling.html).

**Task**

<%= partial "tasks/assign-multi-stemcell" %>

**Implementation**

<%= partial "tasks/assign-multi-stemcell-script" %>

**Usage**

```yaml
- task: assign-multi-stemcell
  image: platform-automation-image
  file: platform-automation-tasks/tasks/assign-multi-stemcell.yml
  params:
    ENV_FILE: ((foundation))/env/env.yml
```

### assign-stemcell
`assign-stemcell` assigns a stemcell to a provided product.
For more information on how to utilize
this workflow, see [Stemcell Handling](./concepts/stemcell-handling.html).

**Task**

<%= partial "tasks/assign-stemcell" %>

**Implementation**

<%= partial "tasks/assign-stemcell-script" %>

**Usage**

```yaml
- task: assign-stemcell
  image: platform-automation-image
  file: platform-automation-tasks/tasks/assign-stemcell.yml
  params:
    ENV_FILE: ((foundation))/env/env.yml
```

### backup-director

Use BBR to backup a BOSH director deployed with Operations Manager.

**Task**

<%= partial "tasks/backup-director" %>

**Implementation**

<%= partial "tasks/backup-director-script" %>

**Usage**

```yaml
- task: backup-director
  image: platform-automation-image
  file: platform-automation-tasks/tasks/backup-director.yml
  params:
    OPSMAN_SSH_PRIVATE_KEY: ((vsphere_private_ssh_key))
```

### backup-product

Use BBR to backup a product deployed with Operations Manager.

**Task**

<%= partial "tasks/backup-product" %>

**Implementation**

<%= partial "tasks/backup-product-script" %>

**Usage**

```yaml
- task: backup-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/backup-product.yml
  params:
    PRODUCT_NAME: cf
    ENV_FILE: env.yml
    OPSMAN_SSH_PRIVATE_KEY: ((opsman-ssh-private-key))
```

### backup-tkgi

Use BBR to backup Tanzu Kubernetes Grid Integrated Edition(TKGI)
deployed with Operations Manager.

<p class="note important">
<span class="note__title">Important</span>
The PKS CLI may be temporarily unavailable.
During the backup, the PKS CLI is disabled.
Due to the nature of the backup, some commands may not work as expected.</p>

**Task**

<%= partial "tasks/backup-tkgi" %>

**Implementation**

<%= partial "tasks/backup-tkgi-script" %>

**Usage**

```yaml
- task: backup-tkgi
  image: platform-automation-image
  file: platform-automation-tasks/tasks/backup-tkgi.yml
  params:
    ENV_FILE: env.yml
    OPSMAN_SSH_PRIVATE_KEY: ((opsman-ssh-private-key))
```

### check-pending-changes
Returns a table of the current state of your Operations Manager
and lists whether each product is changed or unchanged and the errands for that product.
By default, `ALLOW_PENDING_CHANGES: false` will force the task to fail.
This is useful to keep manual changes from being accidentally applied
when automating the [configure-product](#configure-product)/[apply-changes](#apply-changes) of other products.

**Task**

<%= partial "tasks/check-pending-changes" %>

**Implementation**

<%= partial "tasks/check-pending-changes-script" %>

**Usage**

```yaml
- task: check-pending-changes
  image: platform-automation-image
  file: platform-automation-tasks/tasks/check-pending-changes.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    ALLOW_PENDING_CHANGES: true
```

### collect-telemetry
Collects foundation information
using the [Telemetry Collector](https://docs.vmware.com/en/Tanzu-Telemetry-for-Ops-Manager/index.html) tool.

This task requires the `telemetry-collector-binary` as an input.
The binary is available on [Tanzu Network](https://network.tanzu.vmware.com/products/pivotal-telemetry-om/);
you must define a `resource` to supply the binary.

This task requires a [config file](./inputs-outputs.html).

After using this task,
the [send-telemetry](#send-telemetry)
may be used to send telemetry data to VMware.

**Task**

<%= partial "tasks/collect-telemetry" %>

**Implementation**

<%= partial "tasks/collect-telemetry-script" %>

**Usage**

```yaml
- task: collect-telemetry-data
  image: platform-automation-image
  file: platform-automation-tasks/tasks/collect-telemetry.yml
  input_mapping:
    env: configuration
    config: configuration
  params:
    CONFIG_FILE: foundations/((foundation))/config/telemetry.yml
    ENV_FILE: foundations/config/env.yml
```

### configure-authentication
Configures Operations Manager with an internal userstore and admin user account.
See [configure-saml-authentication](#configure-saml-authentication) to configure an external SAML user store,
and [configure-ldap-authentication](#configure-ldap-authentication) to configure with LDAP.

**Task**

<%= partial "tasks/configure-authentication" %>

**Implementation**

<%= partial "tasks/configure-authentication-script" %>

**Usage**

```yaml
- task: configure-authentication
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-authentication.yml
  attempts: 10
  input_mapping:
    env: configuration
    config: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    AUTH_CONFIG_FILE: foundations/config/auth.yml
```

For details on the config file expected in the `config` input,
see [Generating an Auth File](./how-to-guides/configuring-auth.html).

### configure-director
Configures the BOSH Director with settings from a config file.
See [staged-director-config](#staged-director-config),
which can extract a config file.

**Task**

<%= partial "tasks/configure-director" %>

**Implementation**

<%= partial "tasks/configure-director-script" %>

**Usage**

```yaml
- task: configure-director
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-director.yml
  input_mapping:
    config: configuration
    env: configuration
```

<p class="note important">
<span class="note__title">Important</span>
For GCP, if service account is used, the property associated_service_account
must be set explicitly in the <code>iaas_configuration</code> section.</p>

### configure-ldap-authentication
Configures Operations Manager with an external LDAP user store and admin user account.
See [configure-authentication](#configure-authentication) to configure an internal user store,
and [configure-saml-authentication](#configure-saml-authentication) to configure with SAML.

**Task**

<%= partial "tasks/configure-ldap-authentication" %>

**Implementation**

<%= partial "tasks/configure-ldap-authentication-script" %>

**Usage**

```yaml
- task: configure-ldap-authentication
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-ldap-authentication.yml
  params:
    ENV_FILE: ((foundation))/env/env.yml
    AUTH_CONFIG_FILE: ((foundation))/auth/auth.yml
```

For more details on using LDAP,
see the [Operations Manager documentation](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/pcf-interface.html#ldap).

For details on the config file expected in the `config` input,
see [Generating an Auth File](./how-to-guides/configuring-auth.html).

### configure-opsman
This task supports configuring settings
on the Operations Manager Settings page in the UI.
For example, the SSL cert for the Operations Manager VM can be configured.

Configuration can be added directly to [`opsman.yml`](./inputs-outputs.html#ops-manager-config).
An example of all configurable properties can be found in the "Additional Settings" tab.

The [`upgrade-opsman`](#upgrade-opsman) task will automatically call `configure-opsman`,
so there is no need to use this task then.
It is recommended to use this task in the initial setup of the Operations Manager VM.

**Task**

<%= partial "tasks/configure-opsman" %>

**Implementation**

<%= partial "tasks/configure-opsman-script" %>

**Usage**

```yaml
- task: configure-opsman
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-opsman.yml
  input_mapping:
    env: configuration
    config: configuration
    vars: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
    VARS_FILES: vars/foundations/((foundation))/vars/director.yml
```

### configure-product
Configures an individual, staged product with settings from a config file.

Not to be confused with Operations Manager's
built-in [import](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-backup-restore-restore-pcf-bbr.html#deploy-import),
which reads all deployed products and configurations from a single opaque file,
intended for import as part of backup/restore and upgrade lifecycle processes.

See [staged-config](#staged-config),
which can extract a config file,
and [upload-and-stage-product](#upload-and-stage-product),
which can stage a product that's been uploaded.

**Task**

<%= partial "tasks/configure-product" %>

**Implementation**

<%= partial "tasks/configure-product-script" %>

**Usage**

```yaml
- task: configure-pks
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-product.yml
  input_mapping:
    config: configuration
    env: configuration
    vars: configuration
  params:
    CONFIG_FILE: foundations/((foundation))/config/pks.yml
    ENV_FILE: foundations/config/env.yml
    VARS_FILES: |
      vars/foundations/((foundation))/vars/director.yml
      vars/foundations/((foundation))/vars/pks.yml
```

### configure-saml-authentication
Configures Operations Manager with an external SAML user store and admin user account.
See [configure-authentication](#configure-authentication) to configure an internal user store,
and [configure-ldap-authentication](#configure-ldap-authentication) to configure with LDAP.

**Task**

<%= partial "tasks/configure-saml-authentication" %>

**Implementation**

<%= partial "tasks/configure-saml-authentication-script" %>

**Usage**

```yaml
- task: configure-saml-authentication
  image: platform-automation-image
  file: platform-automation-tasks/tasks/configure-saml-authentication.yml
  params:
    ENV_FILE: ((foundation))/env/env.yml
    AUTH_CONFIG_FILE: ((foundation))/auth/auth.yml
```

<p class="note">
<span class="note__title">Note</span>
By default, this task creates a BOSH admin client.
This is helpful for some advanced workflows
that involve communicating directly with the BOSH Director.
It is possible to disable this behavior;
see the <a href="./how-to-guides/configuring-auth.html#generating-an-auth-file">config file documentation</a> for details.</p>

Configuring SAML has two different auth flows for the UI and the task.
The UI will have a browser based login flow.
The CLI will require `client-id` and `client-secret` as it cannot do a browser login flow.

For more details on using SAML,
see the [Operations Manager documentation](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/pcf-interface.html#saml-settings).

For details on the config file expected in the `config` input,
please see [Generating an Auth File](./how-to-guides/configuring-auth.html).

### create-vm
Creates an un-configured Operations Manager VM.

**Task**

<%= partial "tasks/create-vm" %>

**Implementation**

<%= partial "tasks/create-vm-script" %>

**Usage**

```yaml
- task: create-vm
  image: platform-automation-image
  file: platform-automation-tasks/tasks/create-vm.yml
  input_mapping:
    image: opsman-image
    config: configuration
    vars: configuration
  params:
    OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
    STATE_FILE: state-((foundation)).yml
    VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  ensure: &put-state
    do:
    - put: state
      params:
        file: generated-state/state-((foundation)).yml
```

This task requires a config file specific to the IaaS being deployed to.
See [Operations Manager configuration](./inputs-outputs.html#ops-manager-config) for more specific examples.

The task does specific CLI commands for the creation of the Operations Manager VM on each IAAS. See below for more information:

**AWS**

1. Requires the image YAML file from Tanzu Network
2. Validates the existence of the VM if defined in the statefile, if so do nothing
3. Chooses the correct ami to use based on the provided image YAML file from Tanzu Network
4. Creates the VM configured via opsman config and the image YAML. This only attaches existing infrastructure to a newly created VM. This does not create any new resources
5. The public IP address, if provided, is assigned after successful creation

**Azure**

1. Requires the image YAML file from Tanzu Network
1. Validates the existence of the VM if defined in the statefile, if so do nothing
1. Copies the image (of the OpsMan VM from the specified region) as a blob into the specified storage account
1. Creates the Operations Manager image
1. Creates a VM from the image. This will use unmanaged disk (if specified), and assign a public and/or private IP. This only attaches existing infrastructure to a newly createdVM. This does not create any new resources.

**GCP**

1. Requires the image YAML file from Tanzu Network
1. Validates the existence of the VM if defined in the statefile, if so do nothing
1. Creates a compute image based on the region specific Operations Manager source URI in the specified Operations Manager account
1. Creates a VM from the image. This will assign a public and/or private IP address, VM sizing, and tags. This does not create any new resources.

**OpenStack**

1. Requires the image YAML file from Tanzu Network
1. Validates the existence of the VM if defined in the statefile, if so do nothing
1. Recreates the image in openstack if it already exists to validate we are using the correct version of the image
1. Creates a VM from the image. This does not create any new resources
1. The public IP address, if provided, is assigned after successful creation

**Vsphere**

1. Requires the OVA image from Tanzu Network
1. Validates the existence of the VM if defined in the statefile, if so do nothing
1. Build ipath from the provided datacenter, folder, and vmname provided in the config file. The created VM is stored on the generated path. If folder is not provided, the VM will be placed in the datacenter.
1. Creates a VM from the image provided to the `create-vm` command. This does not create any new resources


### credhub-interpolate
Interpolate credhub entries into configuration files

<p class="note important">
<span class="note__title">Important</span>
<b>Deprecation Notice</b>:
This task will be deprecated in future major versions of Platform Automation Toolkit.</p>

<p class="note">
<span class="note__title">Note</span>
The <a href="#prepare-tasks-with-secrets">prepare-tasks-with-secrets</a> task replaces
the <code>credhub-interpolate</code> task on Concourse versions 5.x+
and provides additional benefits.</p>

**Task**

<%= partial "tasks/credhub-interpolate" %>

**Implementation**

<%= partial "tasks/credhub-interpolate-script" %>

**Usage**

```yaml
- task: interpolate-env-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    PREFIX: '/pipeline/vsphere'
    INTERPOLATION_PATHS: ((foundation))/config
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-configs
```

This task requires a valid credhub with UAA client and secret. For information on how to
set this up, see [Secrets Handling](./concepts/secrets-handling.html).

### delete-installation
Delete the Operations Manager Installation

**Task**

<%= partial "tasks/delete-installation" %>

**Implementation**

<%= partial "tasks/delete-installation-script" %>

**Usage**

```yaml
- task: delete-installation
  image: platform-automation-image
  file: platform-automation-tasks/tasks/delete-installation.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### delete-vm
Deletes the Operations Manager VM instantiated by [create-vm](#create-vm).

**Task**

<%= partial "tasks/delete-vm" %>

**Implementation**

<%= partial "tasks/delete-vm-script" %>

**Usage**

```yaml
- task: delete-vm
  image: platform-automation-image
  file: platform-automation-tasks/tasks/delete-vm.yml
  input_mapping:
    config: configuration
  params:
    OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
    STATE_FILE: state-((foundation)).yml
  ensure:
    do:
    - put: state
      params:
        file: generated-state/state-((foundation)).yml
```

This task requires the [state file](./inputs-outputs.html#state) generated [create-vm](#create-vm).

The task does specific CLI commands for the deletion of the Operations Manager VM and resources on each IAAS. See below for more information:

**AWS**

1. Deletes the VM

**Azure**

1. Deletes the VM
1. Attempts to delete the associated disk
1. Attempts to delete the associated nic
1. Attempts to delete the associated image

**GCP**

1. Deletes the VM
1. Attempts to delete the associated image

**OpenStack**

1. Deletes the VM
1. Attempts to delete the associated image

**vSphere**

1. Deletes the VM

### download-and-upload-product
This is an _advanced task_.
If a product (and its associated stemcell) has already been uploaded to Operations Manager
then it will not re-download and upload.
This is helpful when looking for a fast-feedback loop for building pipelines.

This task is similar to [`download-product`](#download-product),
as it takes the same product config.
There are no `outputs` for this task
because the products (and stemcell) don't need to be shared downstream.

	
<p class="note important">
<span class="note__title">Important</span>
This currently only works with product source being Tanzu Network.</p>

**Task**

<%= partial "tasks/download-and-upload-product" %>

**Implementation**

<%= partial "tasks/download-and-upload-product-script" %>

**Usage**

```yaml
- task: download-and-upload-pas
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-and-upload-product.yml
  input_mapping:
    env: configuration
    config: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    CONFIG_FILE: download-product-pivnet/download-tas.yml
```

### download-product

Downloads a product specified in a config file from Tanzu Network(`pivnet`), S3(`s3`), GCS(`gcs`), or Azure(`azure`).
Optionally, also downloads the latest stemcell for that product.

Downloads are cached, so files are not re-downloaded each time.
When downloading from Tanzu Network,
the cached file is verified
using the Tanzu Network checksum
to validate the integrity of that file.
If it does not, the file is re-downloaded.
When downloading from a supported blobstore
the cached file is not-verified,
as there is no checksum from those blobstore APIs to use.

Outputs can be persisted to any supported blobstore using a `put` to an appropriate resource
for later use with download-product using the `SOURCE` parameter,
or used directly as inputs to [upload-and-stage-product](#upload-and-stage-product)
and [upload-stemcell](#upload-stemcell) tasks.

This task requires a [download-product config file](./inputs-outputs.html#download-product-config).

If stemcell-iaas is specified in the [download-product config file](./inputs-outputs.html#download-product-config),
and the specified product is a `.pivotal` file,
`download-product` will attempt to download the stemcell for the product.
It will retrieve the latest compatible stemcell for the specified IaaS.
The valid IaaSs are:

- `aws`
- `azure`
- `google`
- `openstack`
- `vsphere`

If a configuration for S3, GCS, or Azure is present in the [download-product config file](./inputs-outputs.html#download-product-config),
the slug and version of the downloaded product file will be prepended in brackets to the filename.  
For example:

- original-pivnet-filenames:
  ```
  ops-manager-aws-2.5.0-build.123.yml
  cf-2.5.0-build.45.pivotal
  ```

- download-product-filenames if blobstore configuration is present:
  ```
  [ops-manager,2.5.0]ops-manager-aws-2.5.0-build.123.yml
  [elastic-runtime,2.5.0]cf-2.5.0-build.45.pivotal
  ```

This is to allow the same config parameters
that let us select a file from Tanzu Network
select it again when pulling from the supported blobstore.
Note that the filename will be unchanged
if supported blobstore keys are not present in the configuration file.
This avoids breaking current pipelines.

	
<p class="note important">
<span class="note__title">Important</span>
When using the s3 resource in Concourse,
if you are using a <code>regexp</code> in your S3 resource definition
that explicitly requires the Tanzu Network filename
to be the start of the regex, (that is, the pattern starts with <code>^</code>)
this won't work when using S3 config.
The new file format preserves the original filename,
so it is still possible to match on that,
but if you need to match from the beginning of the filename,
that will have been replaced by the prefix described above.</p>

<p class="note important">
<span class="note__title">Important</span>
When specifying Tanzu Application Service [Windows],
this task will automatically download and inject the winfs for pas-windows.</p>

<p class="note important">
<span class="note__title">Important</span>
When specifying Tanzu Application Service-Windows on vSphere,
this task cannot download the stemcell for pas-windows on vSphere.
To build this stemcell manually, see
<a href="https://docs.vmware.com/en/VMware-Tanzu-Application-Service/4.0/tas-for-vms/create-vsphere-stemcell-automatically.html">Creating a vSphere Windows Stemcell</a>.</p>

<p class="note important">
<span class="note__title">Important</span>
When the download product config only has Tanzu Network credentials,
it will not add the prefix to the downloaded product.
For example, <code>example-product.pivotal</code> from Tanzu Network will be output
as <code>example-product.pivotal</code>.</p>

**Task**

<%= partial "tasks/download-product" %>

**Implementation**

<%= partial "tasks/download-product-script" %>

**Tanzu Network Usage**

```yaml
- name: fetch-pks
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-pivnet/download-pks.yml
    input_mapping:
      config: configuration
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - in_parallel:
      - put: pks-product
        params:
          file: downloaded-product/*.pivotal
      - put: pks-stemcell
        params:
          file: pks-stemcell/*.tgz
```

**S3 Usage**

```yaml
- task: download-pks
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-product.yml
  input_mapping:
    config: configuration
    vars: configuration
  params:
    CONFIG_FILE: foundations/((foundation))/config/download-pks.yml
    VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
    SOURCE: s3
  output_mapping:
    downloaded-product: pks-product
    downloaded-stemcell: pks-stemcell
```

**GCS Usage**

```yaml
- task: download-pas
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-product.yml
  params:
    CONFIG_FILE: download-product/pas.yml
    SOURCE: gcs
  input_mapping:
    config: configuration
  output_mapping:
    downloaded-product: pas-product
    downloaded-stemcell: pas-stemcell
```

**Azure Usage**

```yaml
- task: download-pas
  image: platform-automation-image
  file: platform-automation-tasks/tasks/download-product.yml
  params:
    CONFIG_FILE: download-product/pas.yml
    SOURCE: azure
  input_mapping:
    config: configuration
  output_mapping:
    downloaded-product: pas-product
    downloaded-stemcell: pas-stemcell
```

### expiring-certificates
Returns a list of certificates that are expiring within a time frame.
These certificates can be Operations Manager or CredHub certificates.
Root CAs cannot be included in this list until Operations Manager 2.7.
This is purely an informational task.

**Task**

<%= partial "tasks/expiring-certificates" %>

**Implementation**

<%= partial "tasks/expiring-certificates-script" %>

**Usage**
 
```yaml
- task: expiring-certificates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/expiring-certificates.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    EXPIRES_WITHIN: 2m
```

### export-installation
Exports an existing Operations Manager to a file.

This is the first part of the backup/restore and upgrade lifecycle processes.
This task is used on a fully installed and healthy Operations Manager to export
settings to an upgraded version of Operations Manager.

To use with non-versioned blobstore, you can override `INSTALLATION_FILE` param
to include `$timestamp`, then the generated installation file will include a sortable
timestamp in the filename.

example:
```yaml
params:
  INSTALLATION_FILE: installation-$timestamp.zip
```

<p class="note">
<span class="note__title">Note</span>
The timestamp is generated using the time on Concourse worker.
If the time is different on different workers, the generated timestamp may not sort correctly.
Changing the time or timezone on workers might interfere with ordering.</p>

**Task**

<%= partial "tasks/export-installation" %>

**Implementation**

<%= partial "tasks/export-installation-script" %>

**Usage**

```yaml
- task: export-installation
  image: platform-automation-image
  file: platform-automation-tasks/tasks/export-installation.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
```

<%= partial "export_installation_note" %>

### import-installation
Imports a previously exported installation to Operations Manager.

This is a part of the backup/restore and upgrade lifecycle processes.
This task is used after an installation has been exported and a new Operations Manager
has been deployed, but before the new Operations Manager is configured.

**Task**

<%= partial "tasks/import-installation" %>

**Implementation**

<%= partial "tasks/import-installation-script" %>

**Usage**

```yaml
- task: import-installation
  image: platform-automation-image
  file: platform-automation-tasks/tasks/import-installation.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: ((foundation))/env/env.yml
    INSTALLATION_FILE: installation-*.zip
```

### make-git-commit
Copies a single file into a repo and makes a commit.
Useful for persisting the state output of tasks that manage the VM, such as:

- [create-vm](#create-vm)
- [upgrade-opsman](#upgrade-opsman)
- [delete-vm](#delete-vm)

Also useful for persisting the configuration output from:

- [staged-config](#staged-config)
- [staged-director-config](#staged-director-config)

<p class="note important">
<span class="note__title">Important</span>
This commits <b>all changes</b> present
in the repo used for the <code>repository</code> input,
in addition to copying in a single file.</p>

<p class="note important">
<span class="note__title">Important</span>
This does not perform a <code>git push</code>.
You will need to <code>put</code> the output of this task to a git resource to persist it.</p>

**Task**

<%= partial "tasks/make-git-commit" %>

**Implementation**

<%= partial "tasks/make-git-commit-script" %>

**Usage**

```yaml
- task: make-commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: configuration
    file-source: generated-state
  output_mapping:
    repository-commit: configuration-commit
  params:
    FILE_SOURCE_PATH: state.yml
    FILE_DESTINATION_PATH: state/state.yml
    GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
    GIT_AUTHOR_NAME: "Platform Automation Bot"
    COMMIT_MESSAGE: 'Update state file'
```

### pre-deploy-check
Checks if the Operations Manager director is configured properly and validates the configuration.
This feature is only available in Operations Manager 2.6+.
Additionally, checks each of the staged products
and validates they are configured correctly.
This task can be run at any time
and can be used a a pre-check for [apply-changes](#apply-changes).

The checks that this task executes are:

- is configuration complete and valid
- is the network assigned
- is the availability zone assigned
- is the stemcell assigned
- what stemcell type/version is required
- are there any unset/invalid properties
- did any Operations Manager verifiers fail

If any of the above checks fail
the task will fail.
The failed task will provide a list of errors that need to be fixed
before an `apply-changes` could start.

**Task**

<%= partial "tasks/pre-deploy-check" %>

**Implementation**

<%= partial "tasks/pre-deploy-check-script" %>

**Usage**

```yaml
- task: pre-deploy-check
  image: platform-automation-image
  file: platform-automation-tasks/tasks/pre-deploy-check.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### prepare-image
This task modifies the container image with runtime dependencies.
`CA_CERTS` can be added,
which can help secure HTTP connections with a proxy server
and allows the use of a custom CA on the Operations Manager.

<p class="note caution">
<span class="note__title">Caution</span>
<b>Concourse 5+ only</b>:
This task uses a Concourse feature
that allows inputs and outputs to have the same name.
This feature is only available in Concourse 5+.
<code>prepare-image</code> does not work with Concourse 4.</p>

**Task**

<%= partial "tasks/prepare-image" %>

**Implementation**

<%= partial "tasks/prepare-image-script" %>

**Usage**

```yaml
prepare-image: &prepare-image
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-image.yml
  params:
    CA_CERTS: ((opsman-ssl.ca))
```

### prepare-tasks-with-secrets
Modifies task files to include variables needed for config files as environment variables
for run-time interpolation from a secret store.
Learn more about [secrets handling](./concepts/secrets-handling.html).

<p class="note caution">
<span class="note__title">Caution</span>
<b>Concourse 5+ only</b>:
This task uses a Concourse feature
that allows inputs and outputs to have the same name.
This feature is only available in Concourse 5+.
<code>prepare-image</code> does not work with Concourse 4.</p>

**Task**

<%= partial "tasks/prepare-tasks-with-secrets" %>

**Implementation**

<%= partial "tasks/prepare-tasks-with-secrets-script" %>

**Usage**

```yaml
# This task is used in multiple jobs
# The yaml anchor "*prepare-tasks-with-secrets" is used in its place
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/config config/foundations/((foundation))/config
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks
```

### replicate-product
Will replicate the product for use in isolation segments.
The task requires a downloaded product prior to replication.
The output is a replicated tile with a new name in the metadata and filename.

<p class="note">
<span class="note__title">Note</span>
<code>replicate-product</code> does not support storing the replicated product
in a non-versioned blobstore because it cannot generate a unique name.
VMware recommends using the replicated tile immediately in the next task
rather than storing it and using it in a different job.</p>

**Task**

<%= partial "tasks/replicate-product" %>

**Implementation**

<%= partial "tasks/replicate-product-script" %>

**Usage**

```yaml
- task: replicate-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/replicate-product.yml
  input_mapping:
    product: pas-windows
  params:
    REPLICATED_NAME: iso-1
```

### revert-staged-changes
Reverts all changes that are currently staged on the Operations Manager.
This is only available _for_ Operations Manager 2.5.21+, 2.6.13+, or 2.7.2+

<p class="note caution">
<span class="note__title">Caution</span>
Since this task reverts all changes on an Operations Manager,
it can conflict with tasks that perform stage or configure operations.
Use passed constraints to ensure things run in the order you mean them to.</p>

**Task**

<%= partial "tasks/revert-staged-changes" %>

**Implementation**

<%= partial "tasks/revert-staged-changes-script" %>

**Usage**

```yaml
- task: revert-staged-changes
  image: platform-automation-image
  file: platform-automation-tasks/tasks/revert-staged-changes.yml
  input_mapping:
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### run-bosh-errand
Runs a specified BOSH errand directly on the BOSH Director
by tunneling through Operations Manager.

<p class="note important">
<span class="note__title">Important</span>
Operations Manager is the main interface for interacting with BOSH,
and it has no way of knowing what is happening to the BOSH Director
outside of the Operations Manager UI context.
By using this task, you are accepting the risk
that what you are doing cannot be tracked by your Operations Manager.</p>

<p class="note important">
<span class="note__title">Important</span>
Operations Manager, by design, will re-run failed errands for you.
As this task interacts with BOSH directly,
your errand will not be re-run if it fails.
To replicate this retry behavior in your pipeline,
you can use the <a href="https://concourse-ci.org/jobs.html#schema.step.attempts">Concourse attempts</a> feature
to run the task more than once.</p>

**Task**

<%= partial "tasks/run-bosh-errand" %>

**Implementation**

<%= partial "tasks/run-bosh-errand-script" %>

**Usage**

```yaml
- task: run-bosh-errand
  image: platform-automation-image
  file: platform-automation-tasks/tasks/run-bosh-errand.yml
  input_mapping:
    env: configuration
  params:
    PRODUCT_NAME: cf
    ERRAND_NAME: smoke_tests
    ENV_FILE: foundations/config/env.yml
    OPSMAN_SSH_PRIVATE_KEY: ((ops_manager_ssh_private_key))
```

### send-telemetry
Sends the `.tar` output from [`collect-telemetry`](#collect-telemetry)
to VMware.

<p class="note important">
<span class="note__title">Important</span>
To use this task,
you must acquire a Telemetry license key.
Contact your VMware representative.</p>

**Task**

<%= partial "tasks/send-telemetry" %>

**Implementation**

<%= partial "tasks/send-telemetry-script" %>

**Usage**

```yaml
- task: send-telemetry-data
  attempts: 3
  image: platform-automation-image
  file: platform-automation-tasks/tasks/send-telemetry.yml
  params:
    API_KEY: no-op-test-key
    DATA_FILE_PATH: collected-telemetry-data/FoundationDetails*.tar
```

### stage-configure-apply
This is an _advanced task_.
Stage a product to Operations Manager, configure that product, and apply changes
only to that product without applying changes to the rest of the foundation.

<%= partial "disable-verifiers" %>

**Task**

<%= partial "tasks/stage-configure-apply" %>

**Implementation**

<%= partial "tasks/stage-configure-apply-script" %>

**Usage**

```yaml
- task: stage-configure-apply-healthwatch
  image: platform-automation-image
  file: platform-automation-tasks/tasks/stage-configure-apply.yml
  params:
    CONFIG_FILE: healthwatch.yml
  input_mapping:
    product: healthwatch-product
    env: configuration
    config: configuration
```

### stage-product
Staged a product to the Operations Manager specified in the config file.

**Task**

<%= partial "tasks/stage-product" %>

**Implementation**

<%= partial "tasks/stage-product-script" %>

**Usage**

```yaml
- task: upload-and-stage-tas
  image: platform-automation-image
  file: platform-automation-tasks/tasks/stage-product.yml
  input_mapping:
    product: tas-product
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### staged-config
Downloads the configuration for a product from Operations Manager.

Not to be confused with Operations Manager's
built-in [export](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-backup-restore-backup-pcf-bbr.html#export),
which puts all deployed products and configurations into a single file,
intended for import as part of backup/restore and upgrade lifecycle processes.

**Task**

<%= partial "tasks/staged-config" %>

**Implementation**

<%= partial "tasks/staged-config-script" %>

**Usage**

```yaml
- task: staged-config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: configuration
  params:
    PRODUCT_NAME: cf
  ensure:
    do:
      - put: state
        params:
          file: generated-state/state.yml
```

### staged-director-config

Downloads configuration for the BOSH director from Operations Manager.

**Task**

<%= partial "tasks/staged-director-config" %>

**Implementation**

<%= partial "tasks/staged-director-config-script" %>

**Usage**

```yaml
- task: staged-director-config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-director-config.yml
  input_mapping:
    env: configuration
  ensure:
    do:
      - put: state
        params:
          file: generated-state/state.yml
```

The configuration is exported to the `generated-config` output.
It does not extract credentials from Operations Manager
and replaced them all with YAML interpolation `(())` placeholders.
This is to ensure that credentials are never written to disk.
The credentials need to be provided from an external configuration when invoking [configure-director](#configure-director).

<%= partial "missing_fields_opsman_director" %>

### test
An example task to ensure the assets and docker image are setup correctly in your concourse pipeline.

**Task**

<%= partial "tasks/test" %>

**Implementation**

<%= partial "tasks/test-script" %>

**Usage**

```yaml
- task: test
  file: platform-automation-tasks/tasks/test.yml
  image: platform-automation-image
```

### test-interpolate
An example task to ensure that all required vars are present when interpolating into a base file.
For more instruction on this topic, see the [variables](./concepts/variables.html) section

**Task**

<%= partial "tasks/test-interpolate" %>

**Implementation**

<%= partial "tasks/test-interpolate-script" %>

**Usage**

```yaml
- task: test-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/test-interpolate.yml
  params:
    CONFIG_FILE: foundations/((foundation))/config/download-tas.yml
    SKIP_MISSING: true
  input_mapping:
    config: configuration
```

### update-runtime-config
This is an _advanced task_.
Updates a runtime config on the Operations Manager deployed BOSH director.
The task will interact with the BOSH director (sometimes via SSH tunnel through the Operations Manager),
upload BOSH releases,
and set a named runtime config.
This is useful when installing agents on BOSH deployed VMs that don't have a Operations Manager tile.

**Task**

<%= partial "tasks/update-runtime-config" %>

**Implementation**

<%= partial "tasks/update-runtime-config-script" %>

**Usage**

```yaml
- task: update-runtime-config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/update-runtime-config.yml
  input_mapping:
    config: configuration
    env: configuration
    releases: bosh-releases
  params:
    CONFIG_FILE: runtime-config.yml
    NAME: my-runtime-config
    OPSMAN_SSH_PRIVATE_KEY: ((opsman-ssh-private-key))
```

<p class="note important">
<span class="note__title">Important</span>
When using runtime configs, Operations Manager owns the default runtime config.
If you use this task to edit "default" it will be replaced on every Apply Changes.
Use the <code>NAME</code> param to provide a non-conflicting runtime config.</p>

### upgrade-opsman
Upgrades an existing Operations Manager to a new given Operations Manager version

**Task**

<%= partial "tasks/upgrade-opsman" %>

**Implementation**

<%= partial "tasks/upgrade-opsman-script" %>

**Usage**

```yaml
- task: upgrade-opsman
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upgrade-opsman.yml
  input_mapping:
    image: opsman-image
    config: configuration
    env: configuration
    vars: configuration
  params:
    ENV_FILE: foundations/config/env.yml
    OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
    STATE_FILE: state-((foundation)).yml
    INSTALLATION_FILE: ((foundation))-installation*.zip
    VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  ensure: *put-state
```

For more information about this task and how it works, see the [upgrade](./concepts/upgrade.html) page.

### upload-and-stage-product
Uploads and stages product to the Operations Manager specified in the config file.

**Task**

<%= partial "tasks/upload-and-stage-product" %>

**Implementation**

<%= partial "tasks/upload-and-stage-product-script" %>

**Usage**

```yaml
- task: upload-and-stage-pks
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upload-and-stage-product.yml
  input_mapping:
    product: pks-product
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### upload-product
Uploads a product to the Operations Manager specified in the config file.

If a shasum is provided in the config.yml,
the integrity product will be verified
with that shasum before uploading.

**Task**

<%= partial "tasks/upload-product" %>

**Implementation**

<%= partial "tasks/upload-product-script" %>

**Usage**

```yaml
- task: upload-tas-product
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upload-product.yml
  input_mapping:
    product: tas-product
    env: configuration
  params:
    ENV_FILE: foundations/config/env.yml
```

### upload-stemcell
Uploads a stemcell to Operations Manager.

Note that the filename of the stemcell must be exactly as downloaded from Tanzu Network.
Operations Manager parses this filename to determine the version and OS of the stemcell.

**Task**

<%= partial "tasks/upload-stemcell" %>

**Implementation**

<%= partial "tasks/upload-stemcell-script" %>

**Usage**

```yaml
- task: upload-pks-stemcell
  image: platform-automation-image
  file: platform-automation-tasks/tasks/upload-stemcell.yml
  input_mapping:
    env: configuration
    stemcell: pks-stemcell
  params:
    ENV_FILE: foundations/config/env.yml
```
