# Compatibility and versioning

This topic describes Platform Automation Toolkit dependencies and semantic versioning.

## External dependencies

Platform Automation Toolkit is designed to work with these dependencies.

<table>
<thead>
    <tr>
        <th>Platform Automation Toolkit</th>
        <th>Concourse</th>
        <th>Tanzu Operations Manager</th>
        <th>Broadcom Support Portal</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>v5.1.2+</td>
        <td><a href="https://concourse-ci.org"><code>v6.7.9+</code></a><sup>2</sup></td>
        <td><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Tanzu%20Operations%20Manager">v2.9+</a></td>
        <td><a href="https://github.com/pivotal-cf/pivnet-resource">v0.31.15</a></td>
    </tr>
    <tr>
        <td>v5.1.0</td>
        <td><a href="https://concourse-ci.org"><code>v5.0.0+</code></a><sup>1</sup></td>
        <td><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Tanzu%20Operations%20Manager">v2.9+</a></td>
        <td><a href="https://github.com/pivotal-cf/pivnet-resource">v0.31.15</a></td>
    </tr>
</tbody>
</table>

<sup>1</sup>
    [`prepare-tasks-with-secrets`](./tasks.md#prepare-tasks-with-secrets) replaces [`credhub-interpolate`](./tasks.md#credhub-interpolate) in Concourse 5.x+ _only_.
    If using Concourse 4.x, continue using `credhub-interpolate`.
    If using Concourse 5.x+, it is strongly recommended that you switch to `prepare-tasks-with-secrets`.
    For more information about secrets handling, see [Secrets Handling](./concepts/secrets-handling.md).

<sup>2</sup>
    v4.4.32, v5.0.25, and v5.1.2 introduced a version of the Concourse image based on Ubuntu Jammy.
    Because of fundamental issues with the cgroup-to-cgroupv2 transition that happened between bionic and jammy, this requires changes to Concourse that are only available in Concourse v6.7.9+.
    If you are using a version of Concourse prior to v6.7.9, you must use the Ubuntu Bionic-based image.


## Semantic versioning
This product uses [semantic versioning](https://semver.org/) 2.0.0
to describe the impact of changes to the Concourse tasks. In order to take advantage of semantic versioning, you must declare an API.

The following are considered part of the API:

- The Concourse tasks:

    - inputs and outputs (including the format/required information in config files)
    - specified parameters
    - intended and specified functionality

    These are all documented for each task in the task files themselves.

- The minimum compatible versions
  of Concourse and Tanzu Operations Manager
  are part of the API,
  and are specified in the table shown earlier on this page.

- The binaries on the _combined image_, which include:

    - bash
    - build-essential
    - curl
    - gettext
    - git
    - netcat-openbsd
    - python3-pip
    - python3-setuptools
    - rsync
    - ssh
    - unzip
    - zip
    - gcloud
    - python-openstackclient
    - awscli
    - azure-cli
    - bbr-cli
    - bosh-cli
    - credhub-cli
    - govc
    - isolation-segment-replicator
    - om
    - p-automator
    - winfs-injector

- The patterns necessary to specify the files on Tanzu Network:
  It is considered a breaking change
  if any of the following glob patterns for the Platform Automation Toolkit image and tasks
  fail to return a single match
  when used with the `pivnet-resource` and/or `download-product` task:
<pre>
    platform-automation-image-*.tgz             # all IaaSes image
    vsphere-platform-automation-image-*.tar.gz  # vSphere only image
    platform-automation-tasks-*.zip             # tasks
</pre>

The following are NOT covered:

- the `om` command line tool
- the `p-automator` command line tool
- the dependencies on the image intended to be used with the tasks
- non-specified parameters (for instance, any env var used by a CLI you call,
  but not specified as a parameter on the task)
- properties specific to particular product or Tanzu Operations Manager versions in config files
  (which are governed by the product being configured, not our tooling)
- Versions of the included binaries.
  The _presence_ of those binaries is guaranteed, but the _versions_ are not.

In general, if we make any change
that we anticipate could not be consumed without manual changes,
we consider it a breaking change, and increment the major version accordingly.

This assumes that the required image can be made automatically available;
each version of our tasks is designed for and tested with
_only_ the version of the image that shipped with it.

If we accidentally violate our semver,
we will publish an additional version addressing the problem.
In some cases, that may mean releasing the same software with a corrected version,
and shipping a new patch version identical to the version prior to the violation.
In others, it may mean releasing an additional patch version
which reverts an unintentional breaking change.

This should make it safe to automatically consume our release.
It should be very safe to automatically update to patch releases.
Minor versions should be safe,
but it can be more difficult to anticipate the effect of new features, so this is slightly riskier.
Major versions should be expected to break
for at least some users when consumed automatically.
Automatic consumption of major versions should be limited
to test and staging environments
intended to endure and detect such breakage.
